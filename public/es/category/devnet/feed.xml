<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Devnet on NetWithAlex</title>
    <link>http://localhost:1313/es/category/devnet/</link>
    <description>Recent content in Devnet on NetWithAlex</description>
    <generator>Hugo -- 0.140.2</generator>
    <language>es</language>
    <lastBuildDate>Sun, 19 May 2024 13:49:53 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/es/category/devnet/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Ansible Notes</title>
      <link>http://localhost:1313/ansible-notas/</link>
      <pubDate>Sun, 19 May 2024 13:49:53 +0000</pubDate>
      <guid>http://localhost:1313/ansible-notas/</guid>
      <description>&lt;h3 id=&#34;introducción&#34;&gt;Introducción&lt;/h3&gt;
&lt;p&gt;[_Tis Post es parte de Devnet DevOps (300-910)-BluePrint _] (/Study-DevOps-BluePrint/)&lt;/p&gt;
&lt;p&gt;Ansible es una herramienta de automatización de código abierto utilizada para la administración de configuración, implementación de aplicaciones y automatización de tareas. Aunque se puede utilizar para muchos propósitos, estamos particularmente interesados ​​en las tareas relacionadas con la automatización de redes.&lt;/p&gt;
&lt;p&gt;Hay muchos recursos para aprender Ansible en línea, estas notas deberían servir solo como orientación, pero se le recomienda que profundice a su propio ritmo.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Docker - Prácticas de seguridad</title>
      <link>http://localhost:1313/docker-Practices-de-seguridad/</link>
      <pubDate>Sun, 21 Apr 2024 12:49:34 +0000</pubDate>
      <guid>http://localhost:1313/docker-Practices-de-seguridad/</guid>
      <description>&lt;h2 id=&#34;introducción&#34;&gt;Introducción&lt;/h2&gt;
&lt;p&gt;Docker ayuda con el embalaje, la distribución y la ejecución de aplicaciones. Sin embargo, debemos ser responsables para que podamos garantizar la seguridad del entorno Docker. Hay algunas mejores prácticas y estrategias que podemos seguir para lograr este objetivo.&lt;/p&gt;
&lt;h2 id=&#34;las-mejores-prácticas-y-estrategias-de-seguridad&#34;&gt;Las mejores prácticas y estrategias de seguridad&lt;/h2&gt;
&lt;h3 id=&#34;sin-información-confidencial-en-archivos&#34;&gt;Sin información confidencial en archivos&lt;/h3&gt;
&lt;p&gt;DockerFiles se utilizan para definir los pasos necesarios para construir imágenes de Docker. Es crucial evitar incluir información confidencial como credenciales, claves API u otros secretos directamente en Dockerfiles. Tenga en cuenta que estos archivos a menudo están controlados por versión y pueden ser accesibles para usuarios no autorizados, lo que resulta en un riesgo de seguridad significativo.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Estrategias de implementación de CI/CD</title>
      <link>http://localhost:1313/ci-ci-estrategias-despliegue/</link>
      <pubDate>Sun, 21 Apr 2024 12:03:50 +0000</pubDate>
      <guid>http://localhost:1313/ci-ci-estrategias-despliegue/</guid>
      <description>&lt;h2 id=&#34;introducción&#34;&gt;Introducción&lt;/h2&gt;
&lt;p&gt;En el mundo de CI/CD, la implementación de actualizaciones de manera eficiente y con una interrupción mínima es crucial. Existen diferentes estrategias de implementación de liberación que la organización puede adoptar, incluidos ** _ Big-bang, Rolling, Blue-Green y Canary ._ **&lt;/p&gt;
&lt;h2 id=&#34;opción-de-implementación&#34;&gt;opción de implementación&lt;/h2&gt;
&lt;h3 id=&#34;despliegue-de-big-bang&#34;&gt;Despliegue de Big Bang&lt;/h3&gt;
&lt;p&gt;Todos los cambios se agrupan y se despliegan de inmediato; esta es la esencia de la implementación de Big Bang. Si bien simplifica el proceso de implementación, ya que todo se expulsa simultáneamente, también plantea _ ** riesgos significativos ** _. Si surgen problemas durante el despliegue, afectan todo el sistema de inmediato, lo que puede conducir a un tiempo de inactividad generalizado o un mal funcionamiento. El más adecuado para proyectos más pequeños o para aquellos con baja complejidad donde el impacto de las fallas es mínimo.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Docker Golden Images</title>
      <link>http://localhost:1313/Docker-Golden-Images%20/</link>
      <pubDate>Sat, 06 Apr 2024 10:45:40 +0000</pubDate>
      <guid>http://localhost:1313/Docker-Golden-Images%20/</guid>
      <description>&lt;h3 id=&#34;introducción&#34;&gt;Introducción&lt;/h3&gt;
&lt;p&gt;El concepto de imagen dorada se refiere a una imagen que ha sido ampliamente probada y verificada su completamente operativa. Siguiendo la misma lógica, una imagen que no ha sido probada o verificada no debe considerarse una imagen dorada. Las organizaciones deben definir el proceso para seguir para marcar una imagen como ** Golden **.&lt;/p&gt;
&lt;p&gt;El proceso debe incluir metodologías de prueba y verificación. Además, desde un punto de vista de seguridad, los parches deben estar presentes y si hay dependencias externas, es crucial actualizarlos a sus respectivas versiones recomendadas.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Dockerfile</title>
      <link>http://localhost:1313/dockerfile-es/</link>
      <pubDate>Sat, 06 Apr 2024 08:47:03 +0000</pubDate>
      <guid>http://localhost:1313/dockerfile-es/</guid>
      <description>&lt;h3 id=&#34;introducción&#34;&gt;Introducción&lt;/h3&gt;
&lt;p&gt;Docker puede construir imágenes automáticamente leyendo las instrucciones de un DockerFile. Un DockerFile es un documento de texto que contiene todos los comandos que un usuario podría llamar a la línea de comandos para ensamblar una imagen. Esta página describe los comandos que puede usar en un DockerFile.&lt;/p&gt;
&lt;p&gt;Docker ejecuta instrucciones en un Dockerfile en orden. Un Dockerfile ** debe comenzar con una instrucción **.&lt;/p&gt;
&lt;h3 id=&#34;ejemplo&#34;&gt;Ejemplo&lt;/h3&gt;
&lt;p&gt;&lt;code&gt; &lt;/code&gt; ``&lt;/p&gt;
&lt;h1 id=&#34;use-la-imagen-oficial-de-python-como-imagen-base&#34;&gt;Use la imagen oficial de Python como imagen base&lt;/h1&gt;
&lt;p&gt;De Python: 3.9-Slim&lt;/p&gt;</description>
    </item>
    <item>
      <title>Herramientas de integración continua (CI)</title>
      <link>http://localhost:1313/herramientas-ci/</link>
      <pubDate>Thu, 18 Jan 2024 19:46:23 +0000</pubDate>
      <guid>http://localhost:1313/herramientas-ci/</guid>
      <description>&lt;h2 id=&#34;describa-las-características-y-conceptos-de-herramientas-de-compilación-implementación-como-jenkins-drone-o-travis-ci&#34;&gt;Describa las características y conceptos de herramientas de compilación /implementación como Jenkins, Drone o Travis CI&lt;/h2&gt;
&lt;p&gt;En la [Última publicación] (/DevOps-CI-CD-Pipeline/) hablamos sobre los conceptos de CI/CD, enfatizando la importancia de la fase ** _ construcción _ ** como parte del proceso de integración continua. Ahora es el momento de profundizar en las siguientes herramientas de CI: Jenkins, Drone, Travis y Gitlab.&lt;/p&gt;
&lt;h3 id=&#34;jenkins&#34;&gt;Jenkins&lt;/h3&gt;
&lt;p&gt;Jenkins es un servidor de automatización _ ** gratuito (código abierto) diseñado para automatizar partes del proceso de desarrollo de software, sobre todo el edificio, las pruebas y la implementación de cambios en el código. Está basado en Java, tiene una gran comunidad y ha estado allí por un tiempo.&lt;/p&gt;</description>
    </item>
    <item>
      <title>1.0 CI/CD Pipeline</title>
      <link>http://localhost:1313/DevOps-CI-CD-Pipeline%20/</link>
      <pubDate>Wed, 17 Jan 2024 12:12:31 +0000</pubDate>
      <guid>http://localhost:1313/DevOps-CI-CD-Pipeline%20/</guid>
      <description>&lt;h3 id=&#34;conceptos-de-cicd&#34;&gt;Conceptos de CI/CD&lt;/h3&gt;
&lt;p&gt;La integración continua/entrega continua/implementación es una metodología para desarrollar soluciones. La idea es automatizar tanto como sea posible para moverse rápidamente y optimizar el proceso de desarrollo. La tubería NetDevops incluye una fase de construcción en la que nos centraremos para comprender mejor el concepto de integración continua.&lt;/p&gt;
&lt;p&gt;! [] (/WP-Content/uploads/2024/01/captura de captación-2024-01-18-AT-18.45.53.png) Netdevops Pipeline&lt;/p&gt;
&lt;p&gt;En ** Integración continua (CI) **, una idea crucial es la carga frecuente de código en la base de código, a menudo varias veces al día. Esto implica la fusión constante del trabajo de desarrolladores con la base de código y la identificación temprana de problemas mediante el uso de pruebas.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Devnet DevOps (300-910) - Blueprint</title>
      <link>http://localhost:1313/estudio-devops-blueprint/</link>
      <pubDate>Wed, 10 Jan 2024 18:46:45 +0000</pubDate>
      <guid>http://localhost:1313/estudio-devops-blueprint/</guid>
      <description>&lt;p&gt;** [20% 1.0 CI/CD Pipeline] (/DevOps-CI-CD-Pipeline/) **&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[1.1 Describa las características y conceptos de herramientas de compilación/implementación como Jenkins, Drone o Travis CI] (/CI-Tools/)&lt;/li&gt;
&lt;li&gt;1.2 Identificar la secuencia, componentes e integraciones para implementar una tubería de CI/CD para un escenario determinado&lt;/li&gt;
&lt;li&gt;1.3 Problemas de solución de problemas con una tubería de CI/CD, como fallas basadas en código, problemas de tubería e incompatibilidad de la herramienta&lt;/li&gt;
&lt;li&gt;1.4 Identifique las pruebas para integrarse en una tubería CI/CD para un escenario determinado
-[1.5 Identifique la estrategia de implementación de lanzamiento (Canary, Rollbacks y Blue/Green) para un escenario determinado] (/CI-CD-Deployment-Strategies/)&lt;/li&gt;
&lt;li&gt;1.6 Diagnóstico de problemas de gestión de dependencia del código que incluyen API, cadena de herramientas y bibliotecas&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;** 15% 2.0 Embalaje y entrega de aplicaciones **&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
