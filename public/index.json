[{"content":"Introduction In this post, we’ll explore how to get started with SD-WAN automation. Whether you’re new to scripting or just beginning to explore what’s possible with the SD-WAN API, this guide will help you take your first steps. We’ll look at key concepts, practical examples, and the tools you need to start automating tasks and simplifying your network operations.\nWhy should you automate? There are multiple examples where automation could bring huge benefits. Weather it is pushing changes quicker, minimizing risk, being more efficient with time, building custom tools, integrating with third party systems, automation will open the door to these and more ways to easily and efficiently manage the network.\nHere are some use cases:\nDevice Deployment - Automate VM deployment and bring up process based on predefined templates. Configuration Management - Push configs via API in seconds, instead of manually logging into each device, you can push configs via API in seconds. Monitoring and Alerting - Receive alerts when specific events happen on the network, build scripts to monitor exactly what you need. Integration with other systems - Enrich other Cisco or external systems with information shared directly from the SD-WAN Manager towards them. Health Checks - Verify your network is operating smoothly and under a desired state, constantly Augmenting Capabilities - Explore new technologies and experiment how they could be integrated to you day to day activities. SD-WAN Manager REST APIs At the heart of automation we have REST API (Representational State Transfer Application Programming Interface), which is a way for systems to talk to each other over HTTP, just like your browser does when it loads a web page.\nIn SD-WAN automation, the Manager REST API allows you to interact with your SD-WAN controller programmatically. Instead of clicking through the GUI, you can send HTTP requests to:\nGET information (list devices, get health stats) POST new configurations PUT updates to existing objects DELETE configurations you no longer need Each request goes to a specific endpoint URL and include headers, authentication, and payloads.\nThere is Cisco documentation about the API endpoints here. You can also check the in-product API documentation located at\nhttps://vmanage-ip:port/apidocs\nHTTP Status Codes Let\u0026rsquo;s introduce the most common HTTP status codes, which will tell you how a request to a server went. Here are the most common:\n200 OK – Everything worked perfectly. 301 Moved Permanently – The resource has a new URL. 400 Bad Request – The request was malformed. 401 Unauthorized – You need to log in. 403 Forbidden – You’re not allowed to access this. 404 Not Found – The resource doesn’t exist. 500 Internal Server Error – Something broke on the server. 503 Service Unavailable – Server is overloaded or down. We expect to get HTTP 200 when we perform API calls.\nAuthentication Getting a session ID (cookie) The first thing needed to interact the with Manager is getting authenticated. Just in the same way we would do if we wanted to access it through the UI. For this, the following endpoint is needed:\nPOST https://{vmanage-ip-address}/j_security_check Content-Type: application/x-www-form-urlencoded HTTP Body: \u0026#34;j_username={admin}\u0026amp;j_password={credential}\u0026#34; This is a POST operation, that needs the header Content-Type: application/x-www-form-urlencoded and expects a payload of \u0026ldquo;j_username={admin}\u0026amp;j_password={credential}\u0026rdquo;.\nLet\u0026rsquo;s use curl to test it out. Note that when we use option \u0026ndash;data , curl knows it should use POST method.\nalex ~ % curl -v -k --location \u0026#39;https://10.1.1.1:443/j_security_check\u0026#39; \\ --header \u0026#39;Content-Type: application/x-www-form-urlencoded\u0026#39; \\ --data-urlencode \u0026#39;j_username=netwithalex\u0026#39; \\ --data-urlencode \u0026#39;j_password=netwithalex\u0026#39; * Trying 10.1.1.1:443... * Connected to 10.1.1.1 (10.1.1.1) port 443 ... * using HTTP/1.x \u0026gt; POST /j_security_check HTTP/1.1 \u0026gt; Host: 10.1.1.1 \u0026gt; User-Agent: curl/8.7.1 \u0026gt; Accept: */* \u0026gt; Content-Type: application/x-www-form-urlencoded ... * upload completely sent off: 45 bytes \u0026lt; HTTP/1.1 200 OK \u0026lt; set-cookie: JSESSIONID=dEzBwsDlx-eMKye1xbXBgT7NZVfXRe1tJQZvkMLH.b387d75e92857dc1e41025f809f43b054a0d0aa8ebf50be8d2fc1aa2f87c90da; path=/; secure; HttpOnly ... \u0026lt; * Connection #0 to host 10.1.1.1 left intact We need to save the set-cookie\nJSESSIONID=dEzBwsDlx-eMKye1xbXBgT7NZVfXRe1tJQZvkMLH\nand use it next to get a token.\nGetting a token An XSRF token (also called CSRF or Cross-Site Request Forgery token) is a security feature that helps protect a web application from unauthorized actions made by attackers.\nThe following endpoint is used to get a token:\nGET https://{vmanage-ip-address}/dataservice/client/token Content-Type: application/json HTTP Header: \u0026#34;Cookie: JESSIONID={session hash id}\u0026#34; This token in required mostly for POST operations, if you are doing GET operations you likely won\u0026rsquo;t need it. Consider this when building scripts that require POST actions.\nalex ~ % curl -v -k --location \u0026#39;https://10.1.1.1:443/dataservice/client/token\u0026#39; \\ --header \u0026#39;Content-Type: application/json\u0026#39; \\ --header \u0026#39;Cookie: JSESSIONID=dEzBwsDlx-eMKye1xbXBgT7NZVfXRe1tJQZvkMLH.b387d75e92857dc1e41025f809f43b054a0d0aa8ebf50be8d2fc1aa2f87c90da\u0026#39; * Trying 10.1.1.1:443... * Connected to 10.1.1.1 (10.1.1.1) port 443 ... * using HTTP/1.x \u0026gt; GET /dataservice/client/token HTTP/1.1 \u0026gt; Host: 10.1.1.1 \u0026gt; Accept: */* \u0026gt; Content-Type: application/json \u0026gt; Cookie: JSESSIONID=dEzBwsDlx-eMKye1xbXBgT7NZVfXRe1tJQZvkMLH.b387d75e92857dc1e41025f809f43b054a0d0aa8ebf50be8d2fc1aa2f87c90da \u0026lt; HTTP/1.1 200 OK ... \u0026lt; vary: Accept-Encoding \u0026lt; content-type: application/json; charset=UTF-8 \u0026gt; * Connection #0 to host 10.1.1.1 left intact F1FE79CE079240E12A393B73F0EB5445F31BC456322F634EDEF8A9A7D5856A6FC7763D2C80D2253118917910502F20A9A1CA% The token is shown at the very end\nF1FE79CE079240E12A393B73F0EB5445F31BC456322F634EDEF8A9A7D5856A6FC7763D2C80D2253118917910502F20A9A1CA\nWe are ready to start interacting with the Manager\nExamples GET - Retrieving a device\u0026rsquo;s configuration Let\u0026rsquo;s get the running configuration of one device with the following call\nGET https://{{vmanage-ip}}:{{port}}/dataservice/template/config/running/{deviceId} Content-Type: application/json In this case, the deviceId is the chassis number, you can find it on the UI:\nalex ~ % curl -k -v --location \u0026#39;https://10.1.1.1:8443/dataservice/template/config/running/C8K-C0302D69-35A9-4E85-8909-2031A2165FE8\u0026#39; \\ --header \u0026#39;Content-Type: application/json\u0026#39; \\ --header \u0026#39;Cookie: JSESSIONID=dEzBwsDlx-eMKye1xbXBgT7NZVfXRe1tJQZvkMLH.b387d75e92857dc1e41025f809f43b054a0d0aa8ebf50be8d2fc1aa2f87c90da\u0026#39; * Trying 10.1.1.1:8443... * Connected to 10.1.1.1 (10.1.1.1) port 8443 ... * using HTTP/1.x \u0026gt; GET /dataservice/template/config/running/C8K-C0302D69-35A9-4E85-8909-2031A2165FE8 HTTP/1.1 \u0026gt; Host: 10.1.1.1:8443 \u0026gt; User-Agent: curl/8.7.1 \u0026gt; Accept: */* \u0026gt; Content-Type: application/json \u0026gt; Cookie: JSESSIONID=dEzBwsDlx-eMKye1xbXBgT7NZVfXRe1tJQZvkMLH.b387d75e92857dc1e41025f809f43b054a0d0aa8ebf50be8d2fc1aa2f87c90da \u0026gt; ... \u0026lt; vary: Accept-Encoding \u0026lt; content-type: application/json; charset=UTF-8 \u0026lt; server: svcproxy \u0026lt; transfer-encoding: chunked \u0026lt; {\u0026#34;config\u0026#34;:\u0026#34; system\\n system-ip 1.1.200.1\\n overlay-id 1\\n site-id 200\\n no transport-gateway enable\\n port-offset 0\\n control-session-pps 300\\n admin-tech-on-failure\\n sp-organization-name MYSDWAN-LAB123\\n organization-name MYSDWAN-LAB123\\n port-hop\\n track-transport\\n track-default-gateway\\n upgrade-confirm...} The running config is returned inside the {}\nPOST - Creating a new User Let\u0026rsquo;s do an easy POST operation to see how we need to pass the token.\nWe will use the following endpoint\nPOST https://{{vmanage-ip}}:{{port}}/dataservice/admin/user Headers: \u0026#34;Content-Type: application/json\u0026#34;, \u0026#34;accept: */*\u0026#34; Payload = { \u0026#34;group\u0026#34;:[ \u0026#34;operator\u0026#34; ], \u0026#34;description\u0026#34;:\u0026#34;Demo User\u0026#34;, \u0026#34;userName\u0026#34;:\u0026#34;apiUser\u0026#34;, \u0026#34;password\u0026#34;:\u0026#34;apiuser\u0026#34;, } We need to specify the group, description, username and password.\nLet\u0026rsquo;s do it with curl\nalex ~ % curl -v -k --location \u0026#39;https://10.1.1.1:8443/dataservice/admin/user\u0026#39; \\ --header \u0026#39;Content-Type: application/json\u0026#39; \\ --header \u0026#39;X-XSRF-TOKEN: F1FE79CE079240E12A393B73F0EB5445F31BC456322F634EDEF8A9A7D5856A6FC7763D2C80D2253118917910502F20A9A1CA\u0026#39; \\ --header \u0026#39;Cookie: JSESSIONID=dEzBwsDlx-eMKye1xbXBgT7NZVfXRe1tJQZvkMLH.b387d75e92857dc1e41025f809f43b054a0d0aa8ebf50be8d2fc1aa2f87c90da\u0026#39; \\ --data \u0026#39;{ \u0026#34;group\u0026#34;:[ \u0026#34;operator\u0026#34; ], \u0026#34;description\u0026#34;:\u0026#34;API User\u0026#34;, \u0026#34;userName\u0026#34;:\u0026#34;apiuser\u0026#34;, \u0026#34;password\u0026#34;:\u0026#34;apiuser\u0026#34; }\u0026#39; * Trying 10.1.1.1:8443... * Connected to 10.1.1.1 (10.1.1.1) port 8443 ... \u0026gt; POST /dataservice/admin/user HTTP/1.1 \u0026gt; Host: 10.1.1.1:8443 \u0026gt; User-Agent: curl/8.7.1 \u0026gt; Accept: */* \u0026gt; Content-Type: application/json \u0026gt; X-XSRF-TOKEN: F1FE79CE079240E12A393B73F0EB5445F31BC456322F634EDEF8A9A7D5856A6FC7763D2C80D2253118917910502F20A9A1CA \u0026gt; Cookie: JSESSIONID=dEzBwsDlx-eMKye1xbXBgT7NZVfXRe1tJQZvkMLH.b387d75e92857dc1e41025f809f43b054a0d0aa8ebf50be8d2fc1aa2f87c90da \u0026gt; Content-Length: 117 \u0026gt; ... * upload completely sent off: 117 bytes \u0026lt; HTTP/1.1 200 OK ... \u0026lt; vary: Accept-Encoding \u0026lt; vmanagerequestid: 45dc1c76-8a00-48e4-80f0-fe9b2f2a894b \u0026lt; x-content-type-options: nosniff \u0026lt; strict-transport-security: max-age=31536000; includeSubDomains \u0026lt; permissions-policy: geolocation=(self), microphone=(), camera=(), fullscreen=(self) \u0026lt; content-type: application/octet-stream; charset=UTF-8 \u0026lt; server: svcproxy \u0026lt; transfer-encoding: chunked \u0026lt; * Connection #0 to host 10.1.1.1 left intact {}% We received an HTTP 200 and an empty {} response, indicating the user was correctly created. Let\u0026rsquo;s check on the UI\nThe apiuser was created successfully!\nConclusion In this post, we covered the basics you need to start working with the SD-WAN Manager REST APIs — from understanding HTTP status codes to retrieving configurations and creating users. The examples used curl intentionally to help you see the raw structure of requests, understand headers, and learn how to work with cookies and the XSRF token.\nNext, we’ll translate these concepts into Python and start automating real-world tasks step by step.\n","permalink":"http://localhost:1313/automation-intro-en/","summary":"Learn the fundamentals of SD-WAN automation and how to get started with scripting and APIs to streamline your network operations.","title":"Getting Started with SD-WAN Automation"},{"content":"Introduction On my previous post I talked about FEC, a technique to fight packet loss by sending a parity packet to reconstruct missing data. In this post, we’ll explore another powerful SD-WAN feature designed to tackle lossy transports: Packet Duplication. While both features aim to improve reliability, they achieve it in very different ways.\nLet\u0026rsquo;s dive in:\nWhat is Packet Duplication As the name suggests, Packet Duplication involves sending identical packets over multiple transport paths to increase the likelihood of successful delivery. If one path experiences transient loss or is inherently unreliable, the duplicate packet sent over a second, more stable transport can make up for it, keeping the user experience unaffected.\nTo put it visually:\nThe sender uses both the bronze and gold transports to send the duplicate information. The bronze path suffers from packet loss, while the gold path delivers all packets successfully. The receiver discards duplicates and forwards only the earliest received copy to the destination, effectively eliminating loss from the user\u0026rsquo;s perspective — regardless of which path the packet took.\nBefore duplicating a packet, the wan edge will compare its size against the Path Maximum Transmission Unit (PMUT), if the packet length is smaller than the PMUT, packet gets duplicated.\nNote Starting on version 17.15.1a, packets can be duplicated even if length is greater than PMUT, using VRF and Underlay Fragmentation.\nStarting from version 16.12.1b this feature is applicable for\nIPv4 traffic over IPv4 tunnels. Starting 17.15.1a to support is expanded to:\nIPv4 traffic over IPv6 tunnel IPv6 traffic over IPv4 tunnels IPv6 traffic over IPv6 tunnels Considerations Here are a few key points to keep in mind when enabling Packet Duplication:\nFor packet duplication to work, there should be at least two available transports, this is not a suitable solution for single transport sites. The amount of traffic will be doubled keep it mind based on transport capacities. The receiver will need to buffer and discard packets, adding processing overhead Should be enabled for critical traffic only, based on previous considerations. Configuration Using Policy Groups, we can configure Packet Duplication through a data policy that matches intended traffic and applies an action of Loss Correction and select Packet Duplication\nThis configuration should be applied on both directions, so the complete policy looks like this:\ndata-policy data_service_Packet-Duplication vpn-list vpn_Corporate_Users sequence 1 match source-ip 172.16.100.0/24 destination-ip 172.16.10.0/24 ! action accept loss-protect pkt-dup loss-protection packet-duplication ! ! sequence 11 match source-ip 172.16.10.0/24 destination-ip 172.16.100.0/24 ! action accept loss-protect pkt-dup loss-protection packet-duplication ! ! default-action accept ! ! ! apply-policy site-list site_10_100 data-policy data_service_Packet-Duplication from-service ! ! Note Packet duplication is not supported along with the following data policy actions:\nlocal tloc remote_tloc You can read the configuration guide to get more information on restrictions and more.\nVerification To ensure Packet Duplication is working there are a couple of things we can validate.\nFrom the device we can run:\nLisbon_10-1#show sdwan tunnel statistics pkt-dup Generating output, this might take time, please wait ... tunnel stats gre 21.11.0.2 21.101.0.2 0 0 pktdup-rx 4844 pktdup-rx-other 1 pktdup-rx-this 4844 pktdup-tx 8710 pktdup-tx-other 4693 pktdup-capable true tunnel stats gre 31.11.0.2 31.101.0.2 0 0 pktdup-rx 1 pktdup-rx-other 4844 pktdup-rx-this 1 pktdup-tx 4693 pktdup-tx-other 8710 pktdup-capable true pktdup-rx - original packets received on primary tunnel pktdup-rx-other - duplicate packets received on second tunnel pktdup-tx - duplicate packets sent on primary tunnel pktdup-tx-other - duplicate packets sent from secondary tunnel pktdup-capable - Capability exchange with other devices The same information is available through the Manager\u0026rsquo;s UI in the Real Time information section.\nAdditionally, a counter can be added the the policy to confirm the sequence is getting matched.\nTesting Packet Duplication In my setup, I have two active tunnels between the SD-WAN devices: one over MPLS and another over Biz-Internet.\nTo test Packet Duplication, I’ll introduce artificial packet loss on the MPLS transport and run a basic iperf test between two clients to observe how the feature handles it.\nHere’s the test command I’ll use:\niperf3 -c 172.16.100.11 -u -b 1M -t 20 \u0026ndash;dscp ef\nThis command initiates a 20-second UDP test targeting the remote client, using a bandwidth of 1 Mbps and marking the traffic with DSCP EF.\nNote I am not focusing on the exact percentage of packet loss introduced on MPLS. The idea isn’t to test how much packet duplication can recover, but rather to observe the mechanism in action. In theory, even with 100% loss on one transport, the traffic should still arrive via the other — as long as Packet Duplication is properly configured.\nThe sender uses biz-internet as the primary transport\nLisbon_10-1#show sdwan policy service-path vpn 10 interface gigabitEthernet 2 source-ip 172.16.10.11 dest-ip 172.16.100.11 protocol 17 dscp 46 all Number of possible next hops: 1 Next Hop: GRE Source: 31.11.0.2 Destination: 31.101.0.2 Local Color: biz-internet Remote Color: biz-internet Remote System IP: 1.1.100.1 Mpls has 80% loss and my iperf results were the following:\n[ ID] Interval Transfer Bitrate Jitter Lost/Total Datagrams [ 5] 0.00-20.00 sec 2.38 MBytes 1.00 Mbits/sec 0.000 ms 0/4188 (0%) sender [ 5] 0.00-20.04 sec 2.38 MBytes 998 Kbits/sec 0.255 ms 0/4188 (0.0%) receiver Let\u0026rsquo;s check the packet duplication statistics on both sender and receiver sides\nSender\nLisbon_10-1#show sdwan tunnel statistics pkt-dup Generating output, this might take time, please wait ... tunnel stats gre 21.11.0.2 21.101.0.2 0 0 pktdup-rx 14 pktdup-rx-other 0 pktdup-rx-this 14 pktdup-tx 0 pktdup-tx-other 4206 pktdup-capable true tunnel stats gre 31.11.0.2 31.101.0.2 0 0 pktdup-rx 0 pktdup-rx-other 14 pktdup-rx-this 0 pktdup-tx 4206 pktdup-tx-other 0 pktdup-capable true Center your attention on:\nRole Pkts sent primary tunnel Pkts dup secondary tunnel sender 4206 4206 The exact same amount of packets were transmitted over both mpls and biz-internet transports.\nReceiver\nMunich_DC100-1#show sdwan tunnel statistics pkt-dup Generating output, this might take time, please wait ... tunnel stats gre 21.101.0.2 21.11.0.2 0 0 pktdup-rx 0 pktdup-rx-other 758 pktdup-rx-this 0 pktdup-tx 14 pktdup-tx-other 0 pktdup-capable true tunnel stats gre 31.101.0.2 31.11.0.2 0 0 pktdup-rx 4206 pktdup-rx-other 0 pktdup-rx-this 758 pktdup-tx 0 pktdup-tx-other 14 pktdup-capable true Role Pkts Received primary Pkts received secondary Receiver 4206 758 Since the secondary transport was experiencing heavy packet loss, only 18% of packets were received through it. However, this was not an issue because the primary transport delivered 100% of the packets.\nIf the situation were reversed, with the primary path experiencing loss and the secondary path remaining healthy, the roles would simply swap. The primary would deliver 18% and secondary 100%, and once again, the end user wouldn’t experience any packet loss.\nConclusion Packet Duplication is a simple yet powerful feature in Cisco SD-WAN that significantly improves the reliability of traffic. By sending identical packets over multiple transport paths, it ensures that even if one path experiences loss, the application performance remains unaffected.\nWhile it does come at the cost of increased bandwidth usage and processing overhead, it can be a game-changer for critical traffic like voice, video, or remote desktop sessions, especially in environments with unreliable circuits.\nAs with any SD-WAN feature, the key is to use it strategically: enable it for the right traffic, monitor the results, and adjust policies based on your network’s behavior. Have you used Packet Duplication in production? Let me know your experience in the comments or connect with me on LinkedIn to discuss SD-WAN deep dives!\n","permalink":"http://localhost:1313/appqoe-pkt-dup-en/","summary":"Learn how Packet Duplication can help you reliably transmit critical traffic over unreliable transports to making sure your application.","title":"AppQoe Series: Packet Duplication"},{"content":"Introduction Delivering consistent application performance over unreliable or congested links is a constant challenge for most networks. Even with great features like Enhanced Application Aware Routing or TCP Optimization, there are link conditions that go beyond what failover, load balancing or optimization can solve.\nBy adding a recovery mechanism at the packet level, FEC allows Cisco SD-WAN to mask packet loss and maintain application performance without relying on retransmissions.\nIn this post, we will explore how effective FEC can be in SD-WAN. By simulating lossy conditions, and measuring recovery rates.\nIf you evaluating FEC for your deployment or just curious about how it works, this post will walk you through both the theory and practice.\nLet\u0026rsquo;s go!\nWhat is Forward Error Correction (FEC)? Forward Error Correction (FEC) is a technique that improves data transmission reliability by adding redundant information to packets before they’re sent across the network. Instead of waiting for retransmissions when packets are lost, the receiver uses this redundancy to reconstruct missing data on the fly.\nIn the Cisco SD-WAN implementation, FEC creates blocks of 4 data packets + 1 parity packet. If one of those 4 packets is lost along the way, the receiver can fill in the gaps using the parity packet by performing an XOR operation.\nLet\u0026rsquo;s see it in a diagram\nThe sender transmits information to the receiver, but packet 3 is lost in transit. The receiver can use the parity packet to reconstruct packet 3 and avoid retransmissions and delays that would impact application experience.\nNotice that if more than 1 packet is lost, including the parity packet, the reconstruction is not possible. The block size is always 4 and it cannot be changed. Blocks can contain packets from multiple flows.\nNote The fact that FEC adds 1 parity packet for every block of 4 packets increases BW consumption.\nThere are 2 modes of operation\nAlways: FEC will be applied to all traffic matching the policy sequence regardless of packet loss levels. Adaptive: Set a packet loss threshold to start using FEC. For example, with 2% or more packet loss start applying FEC to the traffic. Loss percent is computed with BFD packets. FEC is particularly useful in real-time applications like voice, video, or interactive sessions, where waiting for retransmissions would cause severe delays.\nImportantly, FEC operates between SD-WAN edge devices, making it completely transparent to the applications, there\u0026rsquo;s no need to modify client or server behavior. However, it only works when using IPSec encapsulation; it\u0026rsquo;s not supported over GRE tunnels.\nOne critical implementation detail is packet size: if packets are too large and end up being fragmented, FEC\u0026rsquo;s ability to reconstruct them is significantly reduced. To get the most out of FEC, make sure the payload size stays below the path MTU to avoid fragmentation.\nConfiguration Using Policy Groups, we can configure FEC through a data policy that matches interesting traffic and applies an action of Loss Correction\nIn my case, I matched all the traffic between 172.16.10.0/24 and 172.16.100.0/24. Notice we have the two modes of operations available: Always and Adaptive\nIf FEC Adaptive is selected, the available thresholds are between 1%-5% loss.\nHere is the full configuration of my policy:\nvsmart_1# show running-config policy policy data-policy data_all_FEC vpn-list vpn_Corporate_Users sequence 1 match source-ip 172.16.100.0/24 destination-ip 172.16.10.0/24 ! action accept loss-protect fec-always loss-protection forward-error-correction always ! ! sequence 11 match source-ip 172.16.10.0/24 destination-ip 172.16.100.0/24 ! action accept loss-protect fec-always loss-protection forward-error-correction always ! ! default-action accept ! ! lists vpn-list vpn_Corporate_Users vpn 10 ! site-list site_10_100 site-id 10 site-id 100 ! ! apply-policy site-list site_10_100 data-policy data_all_FEC from-service ! ! ! Verifying FEC There aren\u0026rsquo;t a lot of commands, we can confirm FEC is operational with the following command:\nMunich_DC100-1#show sdwan tunnel statistics fec tunnel stats ipsec 21.101.0.2 21.11.0.2 12346 12346 fec-rx-data-pkts 16243 fec-rx-parity-pkts 4075 fec-tx-data-pkts 7 fec-tx-parity-pkts 1 fec-reconstruct-pkts 935 fec-capable true fec-dynamic false The fec-reconstruct-pkts indicate that 935 packets have been recovered.\nAlso, notice that we can easily see how many parity packets are sent and received which are roughly 1/4 of total sent/received data packets.\nThe same information is also available through the real-time information on the Manager\u0026rsquo;s UI\nTesting FEC Let\u0026rsquo;s run some tests to see FEC in action and the amount of packet loss that can be recovered. I will show different results to understand where FEC delivers better results.\nNote there is loss outside of the SD-WAN routers I cannot control so in order to have more precise results I had to found the rate at which I got 0% packet loss most of the time with my iperf3 results and start introducing controlled loss from there.\niperf -c 172.16.100.11 -u -b 450k -t 30 -l 361 \u0026ndash;dscp ef\nA bandwidth of 450k is around 5 VoIP calls and using a payload of 361 bytes.\nIn this case, I am running unidirectional tests, but keep in mind FEC works in both directions.\nLoss% introduced Total Sent Packets Total Received Packets Recovered Packets Effective Loss % 1 4693 4639 54 0 2 4694 4588 96 0,24 3 4693 4558 111 0,58 4 4694 4524 147 0,51 5 4693 4448 195 0,68 6 4693 4401 231 1,3 7 4693 4374 238 1,8 8 4693 4331 283 1,8 9 4693 4292 297 2,2 10 4693 4215 304 3,8 12 4693 4122 348 3,8 15 4695 3941 382 8 18 4696 3815 356 11 20 4696 3731 368 13 Let\u0026rsquo;s see some interesting visuals:\nAs packet loss increases, the number of recovered packets also grows - up to a certain point. This is expected: FEC adds redundancy, and the more packets are lost, the more recovery is needed. However, there\u0026rsquo;s a natural limit to this capability. If two or more packets within the same FEC block are lost, including the parity packet, recovery becomes impossible, and effective loss starts to climb.\nIt\u0026rsquo;s also important to note that FEC is a resource intensive feature, hence it should be activated for critical traffic and ideally using a packet loss threshold rather than always.\nWhile this lab setup isn’t a perfect replica of real-world conditions, the results are still insightful. FEC was able to recover nearly all lost packets with up to 5% introduced loss and continued to recover around 70% of packets at ~9% loss. Beyond that, recovery efficiency starts to drop. That said, it’s uncommon to see consistent 10%+ loss in production WAN transports and even more so in both directions.\nFinally, although these tests were unidirectional, it’s worth noting that FEC can be applied independently on each direction. This means a well-tuned deployment could tolerate about 5% packet loss per direction while maintaining good performance.\nConclusion Forward Error Correction (FEC) is a proactive technique that adds redundancy before packet transmission, allowing the receiver to recover from certain losses without needing retransmissions. This makes it especially valuable for real-time applications like voice and video, where waiting for retries would introduce harmful delays.\nRemember that FEC isn\u0026rsquo;t free as it introduces overhead. The receiving SD-WAN edge must use additional processing power to reconstruct lost packets, use it for critical traffic and ideally after a specified packet loss threshold.\nFEC is not a replacement for fixing poor network links. Instead, it acts as a smart mitigation layer that helps smooth over transient or moderate packet loss, keeping user experience consistent even when the network isn’t perfect.\nOverall, when deployed correctly, FEC can be a powerful tool in your SD-WAN toolbox — helping ensure consistent application performance over imperfect networks.\n💭 What’s your take on Forward Error Correction in SD-WAN? Have you used it before? Do you have questions about how it works or when to enable it?\nDrop your thoughts or doubts in the comments! I’d love to hear how others are approaching FEC in real world deployments. Let’s learn from each other!\n","permalink":"http://localhost:1313/appqoe-fec-en/","summary":"Learn how Forward Error Correction (FEC) works in Cisco SD-WAN to improve application performance over lossy links. Explore use cases, configuration insights, and testing results.","title":"AppQoe Series: Forward Error Correction (FEC)"},{"content":"Introduction When deploying a new remote site you want the process to be as easy as possible. You don’t want to ship the device to an intermediate location just to preload a configuration, only to ship it again to the final destination. You also don’t want to travel onsite yourself, connect a console cable, and manually configure each device. Now multiply that effort by dozens or hundreds of sites 🤯\nTo solve this challenge, Cisco created an automated onboarding process called Plug and Play (PnP) or Zero Touch provisioning (ZTP). The idea is simple: a router powers on, obtains an IP address, locates its SD-WAN overlay, connects to the controllers, and downloads its configuration—all without human intervention beyond plugging it in.\nA key step in this process is helping the router discover the SD-WAN overlay. This can be achieved via the Cisco Cloud or, in air-gapped environments, by hosting your own On-Prem ZTP Server. Today we are going to explore the second option.\nPnP/ZTP operation The following happens when the router boots up with no configuration:\nNote this process is available for hardware devices only.\nThe ZTP domain is defined on the DHCP server, for example, if the domain name is cisco.com, the router will try to resolve ztp.cisco.com. For more information you can check Cisco\u0026rsquo;s documentation\nConfiguration We need to complete the following tasks to make this work.\nAdd and configure ZTP server Upload device list to ZTP server Prepare device configuration on vManage Configure DHCP and DNS servers Trigger PnP process Add and configure ZTP Server The ZTP server uses the same image as a regular Validator. Follow the usual process to bring up a new VM with connectivity to the Manager.\nThe following is the minimum configuration needed:\nvbond# show run system system host-name ztp-server system-ip 10.10.10.194 site-id 5 sp-organization-name SDWAN-LAB123 organization-name SDWAN-LAB123 vbond 192.168.200.2 local ztp-server vpn 0 interface eth0 ip dhcp-client ipv6 dhcp-client no shutdown ! interface ge0/0 ip address 192.168.200.3/24 no shutdown ! ip route 0.0.0.0/0 192.168.200.253 ! Notice the ztp-server suffix, this will indicate the device to act as a ZTP server\nFrom the Manager, add the ZTP server to the Controller list:\nDepending on the Controller Authentication method, generate and sign the CSR.\nIf you are using Enterprise Certificates, you will need to install the root certificate and the signed certificate.\nFor example:\nztp-server# request root-cert-chain install home/admin/root-ca.crt ztp-server# request certificate install home/admin/ztp.crt Note The ZTP server doesn\u0026rsquo;t have any control connections to the Manager or any other controller.\nUpload device list to ZTP server Now that the ZTP server is installed, we need to provide the device list that will connect with the ZTP server.\nThe easiest way is to get the serialFile.viptela from the PnP portal and copy it locally.\nztp-server:~$ ls -l | grep serial -rw-r--r-- 1 admin admin 2364 Apr 24 21:41 serialFile.viptela then execute\nztp-server# request device-upload chassis-file home/admin/serialFile.viptela Uploading chassis numbers via VPN 0 Copying ... /home/admin/serialFile.viptela via VPN 0 file: /tmp/tmp.CbUWf8GnSN/viptela_serial_file PnP Verifying public key received from PnP against production root cert is_public_key_ok against production root ca: OK Signature verified for viptela_serial_file final file: /tmp/tmp.CbUWf8GnSN/viptela_serial_file Signature verification Suceeded. Success: Serial file is /tmp/tmp.CbUWf8GnSN/viptela_serial_file INFO: Input File specified was \u0026#39;/usr/share/viptela/chassis_numbers.tmp\u0026#39; INFO: # of complete chassis entries written: 12 Json to CSV conversion succeeded! Successfully loaded the chassis numbers file to the database. To verify the list:\nztp-server# show ztp entries ROOT VBOND ORGANIZATION CERT INDEX CHASSIS NUMBER SERIAL NUMBER VALIDITY VBOND IP PORT NAME PATH ----------------------------------------------------------------------------------------------------------------------------------------------------------- ... 23 ASR1001-HX-XXXXXXXXXXX XXXXXXXX valid 192.168.200.1 12346 SDWAN-LAB123 default Prepare device configuration on vManage To get this done I will use a configuration group, but it can be done with templates too.\nI create the device configuration and push it. The task is scheduled as device is offline.\nConfigure DHCP and DNS servers To make it simple I use an intermediate switch as my DHCP and DNS Server with the following configuration:\nip dhcp pool ASR vrf MPLS network 192.168.11.4 255.255.255.252 default-router 192.168.11.6 dns-server 192.168.11.6 domain-name cisco.com ip host vrf MPLS ztp.cisco.com 192.168.200.3 ip host vrf MPLS devicehelper.cisco.com 192.168.200.3 Ok, we are all set to see it in action\nTrigger PnP process To trigger the PnP process the device has to have blank configuration. I will use the following command to reset the config and trigger the process.\nRouter#request platform software sdwan config reset %WARNING: Bootstrap file doesn\u0026#39;t exist and absence of it can cause loss of connectivity to the controller. For saving bootstrap config, use: request platform software sdwan bootstrap-config save Proceed to reset anyway? [confirm] Backup of running config is saved under /bootflash/sdwan/backup.cfg Config reset requested from a console session. Waiting for up to 60 seconds for IOS to initiate reload or report failure. IOS return status: \u0026#34;cfgreset_proceed\u0026#34; Config reset is raised successfully, device will reload shortly. You need console access to see the following logs:\nDevice boots and PnP discovery start.\n*May 4 04:18:42.659: %PNP-6-PNP_DISCOVERY_STARTED: PnP Discovery started The router gets an ip address, default router, domain name and dns server.\nAutoinstall trying DHCPv4 on GigabitEthernet0/0/0,GigabitEthernet0/0/1,GigabitEthernet0/0/2,GigabitEthernet0 ... *May 4 04:19:44.999: %PKI-2-NON_AUTHORITATIVE_CLOCK: PKI functions can not be initialized until an authoritative time source, like NTP, can be obtained. Acquired IPv4 address 192.168.11.5 on Interface GigabitEthernet0/0/1 Received following DHCPv4 options: domain-name : cisco.com dns-server-ip : 192.168.11.6 Device tries to resolve domains and gets redirected to ztp.cisco.com\n*May 4 04:20:08.694: %PNP-3-PNP_CCO_SERVER_IP_UNRESOLVED: CCO server (devicehelper.cisco.com.) can\u0026#39;t be resolved (1/5) by (pid=619, pname=PnP Agent Discovery, time=04:20:08 UTC Sun May 4 2025) ... *May 4 04:20:20.696: %IOSXE_SDWAN_CONFIG-5-PNP_REDIRECT: PnP Redirect Msg: Org name \u0026#34;\u0026#34; Host \u0026#34;ztp.cisco.com.\u0026#34; port 0 intf GigabitEthernet0/0/1 *May 4 04:20:42.010: %PNP-6-PNP_REDIRECTION_DONE: PnP Redirection done (1) by (pid=619, pname=PnP Agent Discovery) *May 4 04:20:42.010: %PNP-6-PNP_SDWAN_STARTED: PnP SDWAN started (1) via (pnp-sdwan-vbond-ztp-discovery) by (pid=619, pname=PnP Agent Discovery) *May 4 04:20:42.811: %PNP-6-PNP_DISCOVERY_DONE: PnP Discovery done successfully (PnP-VBOND-ONPREM-ZTP-IPV4) profile (pnp-zero-touch) We can confirm ztp.cisco.com was resolved\nASR1K-2#show pnp trace | i ztp [05/04/25 04:20:10.695 UTC B7 619] 1: VBOND_ONPRIME_ZTP hostname ztp.cisco.com. resolved to 192.168.11.6 on interface GigabitEthernet0/0/1 [05/04/25 04:20:10.695 UTC B8 619] host_name is ztp.cisco.com. vbond_ipv4_address is 192.168.11.6, interface is GigabitEthernet0/0/1 Next, the router connects to the ZTP-Server and gets redirected the Validator\n*May 4 04:21:17.991: %Cisco-SDWAN-Router-vdaemon-6-INFO-1400002: Notification: 5/4/2025 4:21:17 control-connection-state-change severity-level:major host-name:\u0026#34;Router\u0026#34; system-ip::: personality:vedge peer-type:vbond peer-system-ip::: peer-vmanage-system-ip:0.0.0.0 public-ip:192.168.200.3 public-port:12346 src-color:default remote-color:default uptime:\u0026#34;0:00:00:00\u0026#34; new-state:up ... *May 4 04:21:19.242: %Cisco-SDWAN-Router-vdaemon-6-INFO-1400002: Notification: 5/4/2025 4:21:19 org-name-change severity-level:minor host-name:\u0026#34;Router\u0026#34; system-ip::: old-organization-name:\u0026#34;\u0026#34; new-organization-name:\u0026#34;SDWAN-LAB123\u0026#34; *May 4 04:21:21.597: %Cisco-SDWAN-Router-vdaemon-6-INFO-1400002: Notification: 5/4/2025 4:21:21 control-connection-state-change severity-level:major host-name:\u0026#34;Router\u0026#34; system-ip::: personality:vedge peer-type:vbond peer-system-ip::: peer-vmanage-system-ip:0.0.0.0 public-ip:192.168.200.1 public-port:12346 src-color:default remote-color:default uptime:\u0026#34;0:00:00:00\u0026#34; new-state:up Eventually, the device connected to the Manager and Controller and pulls the configuration\n*May 4 04:21:23.924: %Cisco-SDWAN-Router-vdaemon-6-INFO-1400002: Notification: 5/4/2025 4:21:23 control-connection-state-change severity-level:major host-name:\u0026#34;Router\u0026#34; system-ip::: personality:vedge peer-type:vmanage peer-system-ip:10.10.10.2 peer-vmanage-system-ip:0.0.0.0 public-ip:192.168.100.1 public-port:12746 src-color:default remote-color:biz-internet uptime:\u0026#34;0:00:00:00\u0026#34; new-state:up *May 4 04:21:24.299: %Cisco-SDWAN-CSS-SDWAN-POD1-ASR1K-2-OMPD-5-NTCE-400003: Operational state changed to UP *May 4 04:21:43.981: %DMI-5-AUTH_PASSED: R0/0: dmiauthd: User \u0026#39;vmanage-admin\u0026#39; authenticated successfully from 10.10.10.2:42962 for netconf over ssh. ASR1K-2#show sdwan control connections | i up vsmart dtls 10.10.10.3 5 1 192.168.100.2 12346 192.168.100.2 12346 SDWAN-LAB123 mpls No up 0:02:02:51 0 vbond dtls 0.0.0.0 0 0 192.168.200.1 12346 192.168.200.1 12346 SDWAN-LAB123 mpls - up 0:02:02:54 0 vmanage dtls 10.10.10.2 5 0 192.168.100.1 12946 192.168.100.1 12946 SDWAN-LAB123 mpls No up 0:02:02:49 0 Conclusion On-Prem ZTP server extends the ability to onboard hardware devices to those network where internet access is restricted.\nAutomating router onboarding with On-Prem ZTP provides a great alternative for organizations that need full control over their provisioning process or operate in air-gapped environments. By replicating the Plug and Play process locally, you eliminate the need for manual configuration at remote sites while keeping sensitive environments isolated.\nWith the right setup, onboarding new sites becomes an easy and repetable process that will save precious time, reduce human error and scales SD-WAN deployments.\n👉 Interested in setting up On-Prem ZTP for your network? Leave a comment or reach out, I’d love to help or answer your questions!\n","permalink":"http://localhost:1313/ztp-on-prem-en/","summary":"Plug and Play (PnP) lets you onboard SD-WAN devices automatically via Cisco Cloud. This post explains how to achieve zero-touch provisioning (ZTP) in an airgapped, on-premises environment.","title":"Cisco SD-WAN On-Prem ZTP: Automating Router Onboarding"},{"content":"Introduction Have you ever used a business app that feels painfully slow. Maybe video calls freeze, or a web dashboard takes forever to load. These (and others) are signs that your WAN might be struggling under the hood.\nThe good news? Cisco SD-WAN includes a suite of powerful technologies designed to boost performance over unreliable or high-latency links. In this series, we’ll break down three key features that can significantly improve application experience across your network: TCP Optimization, Forward Error Correction (FEC), and Packet Duplication.\nIn this first post, we’ll explore TCP Optimization - how it works, when to use it, and why it can be a game-changer for your users, especially over high-delay connections.\nWhat is TCP Optimization? The goal of TCP Optimization is to fine tune TCP connections to improve the performance. This is especially useful when there are long-latency links involved.\nThe SD-WAN routers will act as proxies, meaning that they will intercept the TCP connections and tune them to get better performance. Let´s see a visual.\nWithout TCP optimization, the client and server will establish a TCP session directly between them.\nWhen TCP Optimization is used, Router 1 will intercept and terminate the TCP connection from the client and establish a TCP session with Router 2 that will be optimized. Likewise Router 2 will create a TCP session with Server.\nNote All this process is transparent to the client/server and data is going to be cached on the routers to keep the sessions alive.\nThe IOS-XE SD-WAN devices use BBR algorithm which uses information about RTT and available bandwidth to optimize the connection. If you\u0026rsquo;d like to learn more I would recommend checking this video from Neal Cardwell.\nThe current TCP Optimization implementation defines different device roles:\nController Node: Device that intercepts and distributes traffic to Service Nodes. Service Node: Optimization engines for traffic acceleration. In a real world scenario the recommendation is to have optimization services on Branches and Data Centers. There are different requirements based on the volume of traffic those devices will handle. I suggest reading Cisco\u0026rsquo;s Documentation to understand platform requirements and more.\nOn the branches, it is common to use an Integrated Service Node meaning that a single device can intercept, distribute and optimize traffic. On the other hand, on the Data Center, a cluster of External Service Nodes is required to achieve higher throughput and distribute higher volumes of traffic amongst cluster members.\nOverall TCP Optimization is an intensive process for the devices and it\u0026rsquo;s crucial to confirm platform requirements. For instance, my demo environment has two Catalyst 8000V with 8 CPUs and 16 GB of RAM, requirements for a small deployment.\nLet\u0026rsquo;s see in practice what effect Optimization has on the traffic. To demonstrate it, I will take a packet capture on the WAN side with and without optimization:\nWindow Scaling Without Optimization Let\u0026rsquo;s see how the window scaling behaves without optimization\nNotice that the window size remained mostly stable at around 1,000,000 Bytes after around 5 seconds\nWindow Scaling With Optimization Let\u0026rsquo;s look at the same information with optimization enabled.\nNotice how the window size remained changing throughout the session, quickly and aggressively recovering after going down.\nWhy is the window scaling so important? I asked ChatGPT to explain it simply and concisely:\nWindow scaling is crucial in high-latency or high-bandwidth networks because it allows TCP to use a larger receive window, which directly impacts how many bytes in flight (i.e., unacknowledged data) a sender can have. Without window scaling, the max window size is 65,535 bytes — too small for high-speed links, leading to underutilization. With window scaling, the window can grow to gigabytes, enabling the sender to keep more data \u0026ldquo;in flight\u0026rdquo; and maintain high throughput despite delays.\nIn summary, the TCP session is split into three segments, with the optimizing routers advertising higher window scaling and managing connections with the client and server. Traffic is now governed by the BBR algorithm to maximize throughput.\nConfiguration To configure this feature, you can use either Feature Templates and Configuration Groups (with version 20.15 or above). In my case, I will use Configuration Groups and will make use only of Internal Service Nodes on both sides.\nTo start, I add the feature \u0026ldquo;App QoE\u0026rdquo; on the Service Profile with the following configuration:\nService Node to perform acceleration Forwarder to also act as a Controller Node This creates the service node configuration\ninterface VirtualPortGroup2 no shutdown ip address 192.168.2.1 255.255.255.0 service-insertion appqoe ! service-insertion appnav-controller-group appqoe ACG-APPQOE appnav-controller 192.168.2.1 ! service-insertion service-node-group appqoe SNG-APPQOE service-node 192.168.2.2 ! service-insertion service-context appqoe/1 appnav-controller-group ACG-APPQOE service-node-group SNG-APPQOE cluster-type integrated-service-node enable vrf global ! Status should be \u0026ldquo;Running\u0026rdquo;\nLisbon_10-1#show sdwan appqoe tcpopt status ========================================================== TCP-OPT Status ========================================================== Status ------ TCP OPT Operational State : RUNNING TCP Proxy Operational State : RUNNING Next, I create a simple data policy matching traffic between client and server and select the action to be AppQoE Optimization and check the box of TCP Optimization.\nvsmart_1# show running-config policy policy data-policy _VPN_10_AppQoE vpn-list VPN_10 sequence 1 match source-data-prefix-list BR10_172_16_10_0 destination-data-prefix-list DC_100_172_16_100_0 ! action accept tcp-optimization service-node-group SNG-APPQOE ! ! sequence 11 match source-data-prefix-list DC_100_172_16_100_0 destination-data-prefix-list BR10_172_16_10_0 ! action accept tcp-optimization service-node-group SNG-APPQOE ! ! default-action accept ! ! Note the direction to apply this policy should be ALL on both sides.\nvsmart_1# show running-config apply-policy apply-policy site-list BR_10 data-policy _VPN_10_AppQoE all ! site-list DC_100 data-policy _VPN_10_AppQoE all ! ! Verifying TCP Optimization In order to quickly confirm traffic is being optimized, we can enable On-Demand Troubleshooting and select a period of time.\nAlso, from the real-time information we can see the flow list.\nThe Services column indicates the TCP Optimization is applied to those flows.\nTesting TCP Optimization Performance To evaluate the impact of TCP Optimization, I ran iperf tests with varying delay parameters to observe where the feature delivers the most benefit. While this isn’t a professional lab setup, it offers valuable information into how the optimization behaves in practice.\nNote My iperf traffic is not encrypted. It\u0026rsquo;s not possible to optimize encrypted traffic without TLS/SSL Decryption\nSome testing details:\nThroughput is capped at 250 Mbps on the routers. I used 4 parallel streams, each simulating a 100 MB download: iperf -c 172.16.100.11 -n 100MB -P 4 -i 15 -R\nFor consistency, I ran each scenario 5 times, discarded the highest and lowest results, and averaged the remaining 3 samples\nThe following table shows the results:\nDelay TCP Opt BW (Mbps) Time (s) 0 Disabled 248 ~ 13 0 Enabled 121,6 ~ 27 50 Disabled 99,7 ~ 33 50 Enabled 124 ~ 26 100 Disabled 71 ~ 46 100 Enabled 131 ~ 25 150 Disabled 66 ~ 49 150 Enabled 125 ~ 26 200 Disabled 59 ~ 56 200 Enabled 131 ~ 25 250 Disabled 63 ~ 52 250 Enabled 126 ~ 26 Here\u0026rsquo;s a visual representation of the results\nThis is what we can conclude from the data:\nWith 0 ms delay, optimization actually reduces performance (121 Mbps vs 248 Mbps), due to overhead introduced by the feature.\nAs delay increases optimization consistently improves throughput and reduces transfer time, this is seen already at 50 ms delay.\nPerformance degrades significantly without TCP optimization. Bandwidth drops from 248 Mbps at 0 ms to ~59–63 Mbps at 200–250 ms. Time also increases proportionally.\nPerformance is stable across different delay values with TCP optimization. Throughput stays around 125–131 Mbps even at high delays. Transfer time is also consistent at around ~26s.\nConclusion TCP Optimization is highly effective in mitigating the impact of latency on TCP performance. While it introduces some overhead in low-latency conditions, its benefits become more and more evident as delay increases. In scenarios with 100 ms delay or more, optimization can help doubling the throughput and reducing transfer time. If you are thinking about enabling it, take into account that based on the router model, you will get different performance.\nAlso, this feature shouldn\u0026rsquo;t be enabled for all traffic, instead enable it for a specific application or set of applications that need acceleration. Finally, this feature brings higher benefits on inter-continental lines, satellite transports or similar high latency links.\nHope this post was useful and see you in the next one!\n","permalink":"http://localhost:1313/appqoe-tcp-opt/","summary":"Discover how SD-WAN enhances TCP performance. Learn about key optimization techniques that improve application reliability and user experience.","title":"AppQoe Series: TCP Optimization"},{"content":"Introduction Security has always been a top of mind for organizations, but protecting every angle of the network remains a challenge. At the same time, ensuring an optimal application and user experience is equally important. Organizations have often had to choose between security-focused and performance-driven solutions, leading to increased management and operational complexity.\nCisco Secure Access is a robust solution that addresses these challenges. It offers top notch security by integrating advanced technologies and access controls. This means that users can get a secure and direct connectivity from SD-WAN sites to the internet and SaaS Apps.\nLet\u0026rsquo;s see how it works\nSD-WAN Meets Secure Access Starting with SD-WAN version 20.13/17.13, an integration with Secure Access is now available out of the box.\nWith this integration, automatic IPSec tunnels can be established to the primary and secondary Secure Access Data Centers closest to your router’s location, ensuring optimal performance. These tunnels route traffic while enforcing your organization\u0026rsquo;s security policies, providing a simple and powerful way to improve both security and connectivity.\nAt the core of Secure Access are Network Tunnel Groups (NTGs), which manage IPSec connections. Each NTG includes a primary and a secondary Secure Access Data Center. While configuring tunnels to both data centers is not mandatory, it is highly recommended to ensure high availability in case one becomes unavailable.\nIt is possible to configure up to 16 tunnels, 8 active and 8 backup, allowing for load balancing across active tunnels to increase the available bandwidth.\nTo automatically establish the tunnels, the SD-WAN Manager and router need internet connectivity and DNS lookup enabled. This allows the device to determine its own public ip address, communicate it to the Manager and get assigned the nearest primary and secondary SSE Data Centers.\nOnce the tunnels are established, traffic going through them will be secured by the core security features of SSE: FWaaS, CASB, ZTNA and SWG and more.\nConfiguration Steps Create API Key To start, on SSE create an API key for the Manager to securely connect. Make sure the following privileges are granted:\nDeployment / Network Tunnel Group - Read/Write Deployment / Tunnels - Read/Write Deployment / Regions - Read You will get your API Key and Key Secret\nEnter Credentials on the Manager Next, input the information on the SD-WAN Manager under Administration \u0026gt; Settings \u0026gt; Cloud Credentials \u0026gt; SSE\nCreate SSE Policy on the Manager You need to create a new SSE Policy. This is where you input information about the IPSec tunnels.\nFrom Configuration \u0026gt; Policy Groups \u0026gt; Secure Service Edge\nThe following is the minimum you need:\nTracker IP - Used to confirm the tunnel is operational. Tunnel - At least 1 tunnel. Enter tunnel name, source interface and select primary/secondary DC Interface Pair - Specify active and backup tunnels. Select none as backup if there\u0026rsquo;s only 1 tunnel. Note You can select the SSE region of your preference or use Auto to automatically select it.\nThen, create a Policy Group, associate a device and add the SSE policy\nRedirect service side traffic Now, we need to redirect traffic from users to the tunnel. There are two options:\nService Route of type SSE On the Service VPN feature, add a Service Route with SSE Provider Cisco-Secure Access\nThis will be added in the following way:\nip sdwan route vrf 10 0.0.0.0/0 service sse Cisco-Secure-Access You can select what traffic gets forwarded to SSE by modifying the route, however this approach doesn\u0026rsquo;t give a lot of flexibility compared to the second option.\nData Policy Data Policies provide more flexibility to redirect traffic. We can not only match on the destination, but also on other useful elements such as source, applications and more.\nThis is an example matching all traffic coming from my VPN 10 users and setting an action of Secure Service Edge. Notice that we can enable the option to Fallback to routing in case tunnels are unavailable.\nValidations from the Manager Check the tunnel status from Monitor \u0026gt; Tunnels \u0026gt; SIG/SSE Tunnels\nLogs are available and are useful to determine if there are any issues forming the tunnels\nValidations from the User To verify that users are using SSE we have a couple of options\nThe first one is to visit policy.test.sse.com, if traffic is correctly redirected it will show something like this: On SSE side, there is a policy denying traffic to social media apps, let\u0026rsquo;s see the result of trying to access x.com\nLastly, accessing welcome.umbrella.com will let us know if user is protected\nAdditional considerations ECMP is available when multiple tunnels are active. Un-equal load balance can be achieved through weight assignment to IPSec tunnels. Fallback to routing is available when tunnels aren\u0026rsquo;t available Trackers are customizable - custom URL and thresholds to meet desired SLAs In-built dampening mechanism on tunnels to avoid flapping Data policy redirection provides greater flexibility than static sdwan routes Use Loopback interfaces to create multiple tunnels I hope you have learned something useful! See you on the next one 👋\n","permalink":"http://localhost:1313/sdwan-sse-integration/","summary":"Discover how Cisco SD-WAN and Cisco Secure Access work together to enhance network performance and security in an internet first world.","title":"Securing the Edge with Cisco SD-WAN and Secure Access"},{"content":"Introduction In my previous series of posts, I explored Application Aware Routing (AAR) in depth, a key SD-WAN technology that steers traffic over best-performing paths. While AAR has been a fundamental capability for years, the evolution of networking brought new ideas to enhance its effectiveness. This led to the introduction of Enhanced Application Aware Routing (EAAR).\nAAR Limitations Before diving into EAAR, let\u0026rsquo;s understand why it was created. 🤓\nThe current AAR implementation measures the path quality using BFD, sending probes at a defined interval (1s by default). Loss, latency and jitter are derived from those packets and these values are placed into rotating buckets to calculate an average tunnel health metric. This process would typically take between 10 to 60 minutes and with some configuration tweaks we could achieve times of 2 to 10 mins.\nFor those networks that require faster detection, some challenges arise:\nLowering the hello interval to less than 1s affects the device\u0026rsquo;s tunnel scale Lowering bfd multiplier and poll intervals could lead to false positives, switching traffic even with transient network conditions. Switch traffic back and forth, there is no mechanism to determine if a transport is stable again after a network degradation event. Enhanced AAR So, what is EAAR and how it improves its predecessor? 🤔\nIn a nutshell these are the advantages:\nUses inline data rather than BFD. In other words, the data plane packets are used to measure loss, latency and jitter. Steer traffic in seconds rather than minutes Dampening implemented for stability purposes, ensuring transports are stable before forwarding traffic through them. More accurate measurements of loss, latency and jitter Breaking It Down When EAAR is enabled, data packets will be used to measure loss, latency and jitter. Let\u0026rsquo;s understand the key differences:\nLoss measurement The SD-WAN routers will use inline data along with IPSEC sequence numbers to measure loss.\nThere is an in-built mechanism that allows the routers to determine if the loss is local to the router\nLocal loss - typically due to QoS drops Or external to the router\nWAN loss - any packet loss outside the router To calculate the local loss, the router will determine the amount of packets it generated against the amount of packets that actually were sent. To get the WAN loss, peer SD-WAN routers will report the amount of packets received and will use BFD (Path Monitor TLVs) to send this information back to the originating router.\nUp to this point, there is an important improvement in how loss measurement is done, however, this could be further improved by leveraging per queue loss measurements. To achieve this, we need to associate an SLA class with an App Probe Class. Let\u0026rsquo;s see an example.\nWith this App Probe Class, the router will use (and generate BFD) packets with DSCP 18, mimicking less important traffic that will be subject to different rules and paths on the local and external routers. This will provide a more accurate measurement of loss for each type of traffic on the specified transports. If there is no inline data, BFD is used to get measurements.\nNote If using GRE, per queue measurement is not available.\nHere is a visual to better understand how loss will be measured depending on multiple factors\nEncapsulation App Probe Class Measurement type Public tunnels Private Tunnels IPsec Yes Per SLA Total WAN loss + local loss per queue WAN loss per queue + local loss per queue IPsec No All SLAs Total WAN loss + total local loss Total WAN loss + total local loss GRE - All SLAs Total WAN loss + total local loss Total WAN loss + total local loss Latency To measure latency, the router will simply calculate the time taken to send and receive packets between source and destination devices. Inline data is used and it can get to App Probe granularity.\nJitter Another worth mentioning change is that the jitter is computed per direction (receive or transmit). The jitter is computed at the receiver and reported to the sender using BFD TLVs. Inline data is used and BFD is the fallback mechanism if no data traffic is available.\nSLA Dampening One of the benefits of EAAR is steering traffic in seconds rather than minutes, but what would happen if there are transient network conditions causing the transports to not meet the sla every few minutes? Traffic would be constantly switching between transports which is not a desirable scenario and the reason why dampening was introduced.\nThe general idea is that when a transport link goes out of compliance, traffic is rerouted to an alternate path. Once the transport becomes compliant again, the device does not immediately move traffic back. Instead, it starts a timer to ensure the link remains stable for a specified period before reusing it.\nIn the end, dampening helps prevent unnecessary traffic shifts, which could negatively impact performance due to transport instability\nConfiguring EAAR To enable EAAR we have three predefined options:\nMode Poll Interval Poll Multiplier Dampening Multiplier Aggressive 10s 6 (10s-60s) 120 (20 mins) Moderate 60s 5 (60s-300s) 40 (40 mins) Conservative 300s 6 (300s-1800s) 12 (60 mins) Note To use custom timers, configuration needs to be done through CLI templates.\nEAAR follows the same fundamental principle as AAR, using rotating buckets to calculate average loss, latency, and jitter. With the Aggressive mode, traffic would take between 10-60 seconds to shift, depending on how severe the impairment is.\nThe dampening window (poll interval x dampening multiplier) is 1200 seconds, meaning that before switching traffic back to a transport, it needs to be stable for 20 minutes.\nIn my lab, I am using Configuration Groups, however this is available through templates as well.\nYou can use a variable, instead of a global value, to account for devices that will not be running EAAR. In this case, EAAR enabled devices will fallback to AAR.\nThe following config is added to the devices:\nbfd enhanced-app-route enable bfd enhanced-app-route pfr-poll-interval 10000 bfd enhanced-app-route pfr-multiplier 6 bfd sla-dampening enable bfd sla-dampening multiplier 120 Let\u0026rsquo;s see how it works\nDemo In my lab, I use Manager 20.16.1 and my devices are running 17.15.1a\nNote The minimum version required is 20.12/17.12\nLet\u0026rsquo;s start with some verifications after pushing the configuration.\nTo check the configured timers and multipliers\nBR10#show sdwan app-route params Enhanced Application-Aware routing Config: :Enabled Poll interval: :10000 Poll multiplier: :6 App route Poll interval: :120000 Poll multiplier: :5 SLA dampening Config: :Enabled Multiplier: :120 To verify what BFD sessions are using EAAR, look for the FLAGS column\nBR10#show sdwan bfd sessions alt SOURCE TLOC REMOTE TLOC DST PUBLIC DST PUBLIC SYSTEM IP SITE ID STATE COLOR COLOR SOURCE IP IP PORT ENCAP BFD-LD FLAGS UPTIME ------------------------------------------------------------------------------------------------------------------------------------------------- 1.1.1.20 200 up biz-internet biz-internet 30.1.10.2 30.1.20.2 12406 ipsec 20006 EAAR 0:00:20:31 1.1.1.20 200 up mpls mpls 30.2.10.2 30.2.20.2 12366 ipsec 20002 EAAR 0:00:20:38 1.1.1.20 200 up private1 private1 30.3.10.2 30.3.20.2 12366 ipsec 20003 EAAR 0:00:20:37 To get more details about a specific tunnel.\nBR10#show sdwan app-route stats summary Generating output, this might take time, please wait ... app-route statistics 30.1.10.2 30.1.20.2 ipsec 12386 12406 remote-system-ip 1.1.1.20 local-color biz-internet remote-color biz-internet sla-class-index 0,1,2 fallback-sla-class-index None enhanced-app-route Enabled sla-dampening-index None app-probe-class-list None mean-loss 0.000 mean-latency 0 mean-jitter 0 TOTAL AVERAGE AVERAGE TX DATA RX DATA IPV6 TX IPV6 RX INDEX PACKETS LOSS LATENCY JITTER PKTS PKTS DATA PKTS DATA PKTS ------------------------------------------------------------------------------------------------------------- 0 0 0 0 0 0 0 0 0 1 64 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 4 0 0 0 0 0 0 0 0 5 64 0 0 0 0 0 0 0 Notice that there is no traffic between my devices, thus the total packet count on each bucket is low.\nSame information is available through the Manager\u0026rsquo;s UI, using the Real Time dashboard and using the App Routes Statistics Device Option.\nScenario 1 - Slight impairment This is my lab\u0026rsquo;s topology\nFor this first test, I will use the following SLA parameters:\nSLA_Real-Time Loss: 3% Latency: 150ms Jitter: 100ms The AAR policy from the Controller instructs:\nUse mpls as primary path If no color meets the SLA and private1 is available, use it. If private1 is not available, load-balance among all remaining colors. I am matching traffic between 172.16.10.0/24 and 172.16.20.0/24.\nBR10#show sdwan policy from-vsmart from-vsmart app-route-policy app_route_AAR vpn-list vpn_Corporate_Users sequence 1 match source-data-prefix-list BR10 destination-data-prefix-list BR20 action backup-sla-preferred-color private1 sla-class SLA_Real-Time no sla-class strict sla-class preferred-color mpls sequence 11 match source-data-prefix-list BR20 destination-data-prefix-list BR10 action backup-sla-preferred-color private1 sla-class SLA_Real-Time no sla-class strict sla-class preferred-color mpls Initial state without network issues\nBR10#show sdwan app-route stats summary | i color|damp|mean local-color biz-internet remote-color biz-internet sla-dampening-index None mean-loss 0.000 mean-latency 1 mean-jitter 0 local-color mpls remote-color mpls sla-dampening-index None mean-loss 1.212 mean-latency 1 mean-jitter 0 mean-loss 1.212 mean-latency 1 mean-jitter 0 local-color private1 remote-color private1 sla-dampening-index None mean-loss 0.000 mean-latency 0 mean-jitter 0 mean-loss 0.000 mean-latency 0 mean-jitter 0 Notice that the number of packets per bucket increased dramatically\nBR10#show sdwan app-route stats remote-color mpls summary Generating output, this might take time, please wait ... app-route statistics 30.2.10.2 30.2.20.2 ipsec 12366 12366 remote-system-ip 1.1.1.20 local-color mpls remote-color mpls sla-class-index 0,1 fallback-sla-class-index None enhanced-app-route Enabled sla-dampening-index None app-probe-class-list None mean-loss 1.176 mean-latency 0 mean-jitter 0 TOTAL AVERAGE AVERAGE TX DATA RX DATA IPV6 TX IPV6 RX INDEX PACKETS LOSS LATENCY JITTER PKTS PKTS DATA PKTS DATA PKTS ------------------------------------------------------------------------------------------------------------- 0 131136 1501 0 0 100084 20846 0 0 1 131072 1438 0 0 95287 19605 0 0 2 131072 1400 0 0 100985 20937 0 0 3 131072 1781 0 0 85553 18271 0 0 4 64 0 0 0 72618 15942 0 0 5 131072 1589 0 0 65198 14226 0 0 Traffic is using mpls as primary transport\nBR10# show sdwan policy service-path vpn 10 interface gigabitEthernet 4 source-ip 172.16.10.10 dest-ip 172.16.20.10 protocol 6 all Number of possible next hops: 1 Next Hop: IPsec Source: 30.2.10.2 12366 Destination: 30.2.20.2 12366 Local Color: mpls Remote Color: mpls Remote System IP: 1.1.1.20 I will introduce 3% packet loss on the mpls transport and see how long it takes to switch traffic. Since there is around 1% loss already, 3% should be enough to trigger a change.\nThe mpls transport has more than 3% loss\nBR10#show sdwan app-route stats remote-color mpls summary Generating output, this might take time, please wait ... app-route statistics 30.2.10.2 30.2.20.2 ipsec 12366 12366 remote-system-ip 1.1.1.20 local-color mpls remote-color mpls sla-class-index 0 fallback-sla-class-index 1 enhanced-app-route Enabled sla-dampening-index None app-probe-class-list None mean-loss 3.125 \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; mean-latency 0 mean-jitter 0 After 56 seconds, the traffic shifted and any of the remaining compliant transports could be used\nBR10# show sdwan policy service-path vpn 10 interface gigabitEthernet 4 source-ip 172.16.10.10 dest-ip 172.16.20.10 protocol 6 all Number of possible next hops: 2 Next Hop: IPsec Source: 30.3.10.2 12366 Destination: 30.3.20.2 12366 Local Color: private1 Remote Color: private1 Remote System IP: 1.1.1.20 Next Hop: IPsec Source: 30.1.10.2 12386 Destination: 30.1.20.2 12366 Local Color: biz-internet Remote Color: biz-internet Remote System IP: 1.1.1.20 If I take the loss away we can see the dampening mechanism gets activated. So, if the transport is stable for 20 minutes, it will be used again as preferred path.\nBR10#show sdwan app-route stats remote-color mpls summary Generating output, this might take time, please wait ... app-route statistics 30.2.10.2 30.2.20.2 ipsec 12366 12366 remote-system-ip 1.1.1.20 local-color mpls remote-color mpls sla-class-index 0 fallback-sla-class-index 1 enhanced-app-route Enabled sla-dampening-index 1 \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; app-probe-class-list None mean-loss 0.000 mean-latency 0 mean-jitter 0 Scenario 2 - Greater impairment In this case, I will introduce 10% packet loss to biz-internet transport, making private 1 the only compliant transport.\nAfter around 45 seconds, loss for biz-internet was 12%\nBR10#show sdwan app-route stats local-color biz-internet summary Generating output, this might take time, please wait ... app-route statistics 30.1.10.2 30.1.20.2 ipsec 12386 12366 remote-system-ip 1.1.1.20 local-color biz-internet remote-color biz-internet sla-class-index 0 fallback-sla-class-index 1 enhanced-app-route Enabled sla-dampening-index None app-probe-class-list None mean-loss 12.500 mean-latency 0 mean-jitter 0 Traffic shifted to private1 only\nBR10#show sdwan policy service-path vpn 10 interface gigabitEthernet 4 source-ip 172.16.10.10 dest-ip 172.16.20.10 protocol 6 all Number of possible next hops: 1 Next Hop: IPsec Source: 30.3.10.2 12366 Destination: 30.3.20.2 12366 Local Color: private1 Remote Color: private1 Remote System IP: 1.1.1.20 After removing the packet loss, biz-internet has the dampening mechanism activated\nBR10#show sdwan app-route stats local-color biz-internet summary Generating output, this might take time, please wait ... app-route statistics 30.1.10.2 30.1.20.2 ipsec 12386 12366 remote-system-ip 1.1.1.20 local-color biz-internet remote-color biz-internet sla-class-index 0 fallback-sla-class-index 1 enhanced-app-route Enabled sla-dampening-index 1 \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; app-probe-class-list None mean-loss 1.562 mean-latency 0 mean-jitter 0 In this case, the time to switch traffic was reduced as a consequence of a greater impairment.\nScenario 3 - Multiple App Probe Classes For this final scenario, let\u0026rsquo;s see how to get the most benefit out of EAAR.\nThe configuration is more complex as it involves QoS, App Probe Classes and AAR Policy.\nQoS is required to classify and send traffic out on different queues. App Probes Classes to measure loss, latency and jitter on each of those queues, independently. My Qos configuration has 3 queues and queue 2 will handle the least important traffic.\nQueue 0 for control traffic Queue 1 for Real-Time Traffic (marked DSCP 46) Queue 2 for Transactional traffic (marked DSCP 18) I use a data policy to match traffic on the service side, mark it with the right DSCP and put it on the right forwarding class. I also created a shaper on my mpls interface\nTo demo things out, I will have two data transfers:\nHTTP GET (port 8000) SCP copy (port 22) My SLAs have the following configurations:\nSLA Class Name Loss Latency Jitter SLA_Real-Time 3 % 150 ms 100 ms SLA_Transactional 5 % 45 ms 150 ms The first thing to note is that my two app probes classes are measured independently. See how the mean loss for Transactional-Probe_Class is 1, whereas for Real_Time_Probe_Class is 0.\nBR10#show sdwan app-route stats local-color mpls summary Generating output, this might take time, please wait ... app-route statistics 30.2.10.2 30.2.20.2 ipsec 12366 12366 remote-system-ip 1.1.1.20 local-color mpls remote-color mpls sla-class-index 0,1,2 fallback-sla-class-index None enhanced-app-route Enabled sla-dampening-index None app-probe-class-list None mean-loss 0.000 mean-latency 1 mean-jitter 0 TOTAL AVERAGE AVERAGE TX DATA RX DATA IPV6 TX IPV6 RX INDEX PACKETS LOSS LATENCY JITTER PKTS PKTS DATA PKTS DATA PKTS ------------------------------------------------------------------------------------------------------------- 0 16384 0 0 0 35827 111807 0 0 1 49152 0 1 0 37788 118236 0 0 2 49216 0 1 0 36859 115551 0 0 3 16384 0 1 0 23894 77280 0 0 4 32768 0 1 1 33179 103759 0 0 5 32768 0 1 0 21485 71702 0 0 app-probe-class-list Real_Time_Probe_Class mean-loss 0.000 mean-latency 0 mean-jitter 0 TOTAL AVERAGE AVERAGE TX DATA RX DATA IPV6 TX IPV6 RX INDEX PACKETS LOSS LATENCY JITTER PKTS PKTS DATA PKTS DATA PKTS ------------------------------------------------------------------------------------------------------------- 0 0 0 0 0 - - - - 1 32768 0 1 0 - - - - 2 32768 0 0 0 - - - - 3 0 0 0 0 - - - - 4 32768 0 1 2 - - - - 5 0 0 0 0 - - - - app-probe-class-list Transactional-Probe_Class mean-loss 0.000 mean-latency 1 mean-jitter 0 TOTAL AVERAGE AVERAGE TX DATA RX DATA IPV6 TX IPV6 RX INDEX PACKETS LOSS LATENCY JITTER PKTS PKTS DATA PKTS DATA PKTS ------------------------------------------------------------------------------------------------------------- 0 16384 0 0 0 - - - - 1 49152 0 1 0 - - - - 2 49216 0 1 0 - - - - 3 16384 0 1 0 - - - - 4 32768 0 1 1 - - - - 5 32768 0 1 0 - - - - Now, I have lowered my shaper. EAAR was quick to detect a change in latency for the transactional SLA, it is now 53 ms.\nBR10# show sdwan app-route stats local mpls summary Generating output, this might take time, please wait ... app-route statistics 30.2.10.2 30.2.20.2 ipsec 12386 12366 remote-system-ip 1.1.1.20 local-color mpls remote-color mpls sla-class-index 0,1,2 fallback-sla-class-index None enhanced-app-route Enabled sla-dampening-index None app-probe-class-list None mean-loss 0.000 mean-latency 53 mean-jitter 0 TOTAL AVERAGE AVERAGE TX DATA RX DATA IPV6 TX IPV6 RX INDEX PACKETS LOSS LATENCY JITTER PKTS PKTS DATA PKTS DATA PKTS ------------------------------------------------------------------------------------------------------------- 0 2048 0 54 0 4396 8513 0 0 1 1024 0 55 0 4461 8534 0 0 2 8256 0 49 0 4429 8549 0 0 3 16384 0 54 0 4411 8549 0 0 4 0 0 53 0 4440 8549 0 0 5 0 0 54 0 4443 8549 0 0 app-probe-class-list Real_Time_Probe_Class mean-loss 0.000 mean-latency 0 mean-jitter 0 TOTAL AVERAGE AVERAGE TX DATA RX DATA IPV6 TX IPV6 RX INDEX PACKETS LOSS LATENCY JITTER PKTS PKTS DATA PKTS DATA PKTS ------------------------------------------------------------------------------------------------------------- 0 0 0 0 0 - - - - 1 0 0 0 0 - - - - 2 8192 0 0 0 - - - - 3 16384 0 0 0 - - - - 4 0 0 0 0 - - - - 5 0 0 0 0 - - - - app-probe-class-list Transactional-Probe_Class mean-loss 0.000 mean-latency 53 \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; mean-jitter 0 TOTAL AVERAGE AVERAGE TX DATA RX DATA IPV6 TX IPV6 RX INDEX PACKETS LOSS LATENCY JITTER PKTS PKTS DATA PKTS DATA PKTS ------------------------------------------------------------------------------------------------------------- 0 2048 0 54 0 - - - - 1 1024 0 55 0 - - - - 2 8256 0 49 0 - - - - 3 16384 0 54 0 - - - - 4 0 0 53 0 - - - - 5 0 0 54 0 - - - - Now that my Transactional SLA with a maximum latency of 45 ms is not met , I will use NWPI to understand how traffic is getting sent out. Let\u0026rsquo;s examine HTTP traffic using port 80000\nNotice that, on the upstream direction, the local and remote color is set to private1, indicating that traffic has moved away from mpls and its 53 ms latency. Just what we expected ✅\nNow, let\u0026rsquo;s see how traffic on port 22 is flowing\nAgain, take a look at the upstream local and remote color, notice how mpls is still in use for this traffic, as there are no path issues detected.\nIn summary, the traffic with dscp 46 is working perfectly fine on the mpls transport, however, traffic with DSCP 18 was having more latency than the configured SLA, so traffic was moved to Private1 as it complies with the SLA.\nWe can confirm we are measuring and taking routing decisions on a per queue basis, this is a huge difference 🤯 !\nLessons learned Using inline data, the number of samples increases dramatically compared to BFD sample size. 📈 EAAR can steer traffic in seconds, rather than minutes. ⏩ EAAR delivers the greatest benefits on transports with QoS, such as MPLS. 🚀 Even on transports without QoS, inline data measurements increases sample size and accuracy. ⏳ The dampening timer is useful to ensure transports are stable before marking them as valid. ✅ Interoperability between devices running EAAR and devices running AAR is possible 🔄 I hope you have learned something useful! See you on the next one 👋\n","permalink":"http://localhost:1313/enhanced-aar/","summary":"Learn the benefits of enhanced app aware routing and how to implement it on your network","title":"Enhanced Application Aware Routing"},{"content":"Introduction In my last post, I created a Cisco SD-WAN assistant to help me run NWPI traces and troubleshoot the network. The interaction with the assistant required the user to answer questions until receiving information about a particular flow and potential problems. In this post my goal is to use multiple agents and see if I can get to the same conclusion with less human interaction. Repository can be found here\nGetting Started To achieve this, I will use LangGraph officially defined as:\nUna librería basada en LangChain que permite construir aplicaciones multiagente con estados persistentes\nThere are different approaches, but I decided to build a structure where there is a supervisor that orchestrates the workflow and decides who should act next. The idea is to build a graph that represents the agents and how they are connected. The graph illustrates the order in which agents can be executed.\nIn my case I have 3 agents:\nSupervisor - This agent is in charge of receiving user input and deciding who should act next. Also, once others agents finish their tasks, they will report back to it and a new routing decision will be made. The supervisor is the only agent that can decide when to go back to the user with a response. Reviewer - This agent will review the information that will be sent back to the user, perform some summarization and resolve questions or situations the tracer might raise. Tracer - This is the agent that will run the traces and retrieve the information that the user is looking for. It will report back to the supervisor when done or if any questions need to be answered. I had to modify the prompt of the tracer a little bit, so I could get a behavior that is better for this approach. Also, each agent can have its own tools. Currently, the tracer has more tools than the rest of agents.\nVisualized, the graph looks like this:\nThe dotted arrow indicate a conditional edge, meaning that the supervisor can decide what the next agent should be or if ending is appropriate.\nThe continuous arrow indicate the next step that must be taken. For example, after \u0026ldquo;start\u0026rdquo; the next agent must be the supervisor. Tracer and Reviewer must go to the supervisor.\nEven though this is a simple graph, this supervisor approach is very powerful.\nHow the supervisor routes? The supervisor plays a critical role as it determines who should act next. This is defined in the following function:\noptions = [\u0026#34;FINISH\u0026#34;] + members function_def = { \u0026#34;name\u0026#34;: \u0026#34;route\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Select the next role.\u0026#34;, \u0026#34;parameters\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;routeSchema\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;object\u0026#34;, \u0026#34;properties\u0026#34;: { \u0026#34;next\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;Next\u0026#34;, \u0026#34;anyOf\u0026#34;: [ {\u0026#34;enum\u0026#34;: options}, ], } }, \u0026#34;required\u0026#34;: [\u0026#34;next\u0026#34;], }, } With this, every time the supervisor receives any input, it will come up with a \u0026ldquo;next\u0026rdquo; value from the available options and this will represent the next node on the graph.\nDemo We will use the following topology to test\nI tell the assistant information about the issue and inform that there is traffic passing already (traffic is required in order for NWPI to generate the insights we are looking for).\nThis is what the Assistant came back with\nThe response presents information in a condensed way, indicating the hops and path the traffic is taking and some events detected for this communication. The details of one of the flows is also present, however is has less information than before. This is because I have asked the reviewer agent to keep what it considers more relevant and send it to the user. In the end, we can see that the DROP_REPORT is mentioned and there is a suggestion to review ACLs 🎉\nWe can play with the reviewer prompt to display more information about the details of the flow.\nBehind the scenes Ok, the assistant came back with a good response, but let\u0026rsquo;s see in more detail what happened under the hood.\nUsing LangSmith we can get details and insights about the workflow followed. Here is the complete process.\nFirst, the supervisor receives the user\u0026rsquo;s query and pass it to the tracer.\nNext, the tracer uses the available tools to starts the trace, waits to capture some flows and retrieves information. Reports to the supervisor. Note that the order in which tools are executed is up to the agent.\nThen, the supervisor receives the information and decides the reviewer should act next.\nNext, the reviewer receives the information and rewrites what was received from the tracer. Goes back to the supervisor.\nThe supervisor decides the information is ready to be sent to the user. This is when we receive the message back on Webex.\nLessons Learned Since agents can make decisions, it is not always easy to understand what they are doing or why they return what they return, using LangSmith definitely helped with this. Not only we can see the order and tools used, but also there is some metadata that provides additional valuable information. I got to some situations where the supervisor was calling the tracer multiple times due to some error retrieving information. In the end, this was caused by error on the code and, fortunately, my assistant isn\u0026rsquo;t expensive. However, if your use case consumes a lot of tokens you should consider add some sort of safeguard to prevent a loop that grows your API consumption. Talking about cost, small language models are a good alternative. After running out of quota, I remembered gpt-4o-mini model is out and decided to give it a try. After some testing I saw it performed very well and was much cheaper, so I stuck to it. Conclusion Using multi-agent deployment we can achieve more complex tasks and have more flexibility. If needed, user interaction can be added on certain decisions that are important. Also, there is some added complexity as the prompts have to be refined to achieve the results we expect. In my case I had to do multiple iterations and refinements to all agents\u0026rsquo; prompts before getting an output that I considered to be good enough. I am interested in testing other approaches to multi-agent deployments and adding additional info for agents to provide more accurate information through RAG.\n","permalink":"http://localhost:1313/improving-my-sd-wan-assistant-multiple-agents/","summary":"Learn how an LLM agentic approach can be used to troubleshoot your SD-WAN network","title":"Improving my SD-WAN Assistant - Multiple agents"},{"content":"Introduction It has been a while since I wanted to hop on to the LLM train and learn how to use one of the popular frameworks. A few months back, I saw a great Cisco Live presentation by my good friend Jesus, and it gave me the determination I needed to finally dive deeper into the topic.\nSince then, I have been doing research and thinking about a nice use case for me to put as objective of my learning process. After considering different options, I decided to build an SD-WAN AI assistant that could help me troubleshoot an SD-WAN issue. Taking advantage of the available tools, I decided that my assistant would be an expert on the Net work Wide Path Insights functionality.\nIn this post, I want to share a bit of my experience building it and of course show some of the results. For a better understanding I suggest to have the G ithub repo opened as you go through the post.\nAbout the setup My SD-WAN Lab is running 20.12.3 on the Manager and the Wan Edges are using 17.9.4a. I have a very simple topology that looks something like this:\nThe programming language used is Python and the framework I chose to interact with the LLM is LangChain. I used OpenAI model gpt-4o and a Webex bot for the interaction. The repo can be found here.\nMy objective For the sake of context, troubleshooting inside a SD-WAN fabric is not easy because traffic is encrypted, policies dictate how traffic will flow, there could be multiple paths to a destination, next hops can be changed with policies, there are multiple hops involved, and more. Figuring out all this information is time consuming and not a straightforward process.\nNWPI Trace is a tool that greatly improves the troubleshooting process as it will give hop-by-hop information and visibility. It can be easily started from the Manager\u0026rsquo;s UI, it will detect flows based on specified filters and you can browse around to get all the visibility you need. It is a very complex and complete tool. As I described before, I wanted to use this project as a playground to learn and since I didn\u0026rsquo;t have prior experience with LLMs or LangChain I set a simple objective:\nBuild an assistant that can start a NWPI trace and give me details of the flows.\nPlanning and Building Ok, I had my objective, but how to start?\nI took a hands-on approach which meant that I didn\u0026rsquo;t learn LangChain from scratch and instead took the Cisco Live session repo as a base and built on top of that. The reasons to choose this repo were simple:\nIt was explained on the sessions so I had a general idea of the technologies and its purpose. I thought it would be easy to adjust to my use case (Eg. I also use Webex, I will be interacting with network devices, I saw how the tools could be replaced with my own) I had to do some cleaning before starting, this required me to understand what was essential to host the LLM and interact with it. Luckily, the repo had an organized structure that made it easy to understand.\nFrom the session, I learned about LangChain Tools, so I knew I could create functions that my agent could use to perform different actions. In this case, actions would be something like starting those traces and getting info from them\nChallenge 1 I needed to get familiar with the NWPI API, at this point I knew I had seen somewhere on the API documentation that some operations were available, but never had taken the time to analyze them. To my surprise, the specific actions of starting a trace and getting details of it, were not included\u0026hellip; There was information about starting a \u0026ldquo;task\u0026rdquo; a.k.a \u0026ldquo;Auto-on Task\u0026rdquo;, which is not the same as the \u0026ldquo;Trace\u0026rdquo; I had in mind. At this point, I needed to decide if I would go for the \u0026ldquo;official\u0026rdquo; and maybe easier way or exploring an alternative to achieve exactly what I wanted.\nKnowing that almost everything is API driven, I used the inspect tab of my browser and started exploring the APIs triggered when I started a trace through the UI. After a first quick pass, I determined it was doable and started gathering the information I needed.\nChallenge 2 I already knew I would have to do some analysis to make my idea a reality, but I underestimated how much I would need to do. In fact, the difficulty of this task kept me away from the project for some time as it became increasingly complex.\nIn my mind there were only 3 \u0026ldquo;simple\u0026rdquo; tasks:\nFind the API to start the trace Find the API to confirm the trace is running Find the API to give me details of the flows Find the API to start the trace Starting a trace from the UI is very simple, you just need a Site ID and a VPN ID. However, there are underlying verifications happening that we take for granted.\nThe site ID is really needed to identify the devices to start the trace on. There are a bunch of options (QoS insights, ART visibility, APP visibility, DIA, etc) that are version dependent. The VPN needs to exist. To get this done I created the function get_device_details_from_site so I could find related information of the devices to start the trace. I needed:\nversions serial numbers names reachability status. Then, I created the start_trace function that would receive the information previously obtained and other filters. I kept the filters as simple as possible, leaving only an option to specify a source and destination subnet. There are a lot of trace options for which I didn\u0026rsquo;t do any type of version verification before running it, I just did it for the QoS insights that requires version 17.9 or later. This function returns some information needed later to verify the status.\nFind the API to confirm the trace is running This was probably the easiest task. I created the verify_trace_state function and with the help of the LLM it can be ran some seconds after starting the trace. It returns the state, which is also needed to get information later on.\nFind the API to give me details of the flows This was the most complex and time consuming task. In my mind checking the result of a trace is very simple, however when we receive the information in chunks, through different calls it starts getting tricky.\nI tried to replicate the process I go through on the UI:\nView the insights of the trace and check the flows that were captured (if any) For the list of flows, look for the one that had the \u0026ldquo;readout\u0026rdquo; button in red (problem detected) and click to get more details. Expand the flow view to get access to the advanced functionalities so I can determine the features that the packet is going through on each of the hops. To get the flows captured for the trace I created the function get_flow_summary. This function will return the list of captured flows, You will see details like src/dst, application and protocol. This is useful to identify the flow id that you are interested in getting more details.\nI created the trace_readout function to get a summary of the events that the trace captured along with the affected path. For example, you could see that an SSH flow is not working between Device X and Device Y.\nOk, once you have identified the flow and events you are interested in, you can get detailed information of the flow with the function get_flow_detail. This will give you hop by hop information like:\nHop Event Local/Remote colors Ingress/Egress interfaces Ingress/Egress features applied to packets Feature making the forward decision With this information is possible to see all sort of things, like ACLs, type of policies applied, why a packet was routed through a specific color, drops, confirm your policy is working as expected, etc.\nOk, I think that\u0026rsquo;s it!\nDemo I started by creating an ACL to block communication and applied it on the DC side.\nMunich_DC100-1 - ACL configuration sdwan interface GigabitEthernet2 access-list ACL_Drop_172_16_10_0 out policy access-list ACL_Drop_172_16_10_0 sequence 1 match source-ip 172.16.10.0/24 destination-ip 172.16.100.0/24 ! action drop count dropCounter ! ! default-action accept ! Will my assistant detect this? 🤔\nNext, I start the application and request the LLM to start a trace. I can confirm on the UI that it is created.\nI start a couple of SSH connections from branch to DC\nThen, I ask the assistant if flows have been captured, it responds with this\nWe can see flows were captured and also it gave me more information of the events detected and the path with device names. The first event seem to be related to our issue. So far the information looks accurate, let\u0026rsquo;s get more details.\nWith this, we can see that the client sent multiple ssh attempts, we can dig further into one of the flows. Let\u0026rsquo;s see what else it gives.\nFinally, the assistant provides detailed information about the features that each of the hops apply to the traffic. On the second hop in Munich DC we can see that egress features show the SD-WAN ACL and a Drop Report. The assistant provides its own conclusion and it is also suspecting that Munich router is dropping the traffic. With a little bit more work, the agent could be able to tell the name of the ACL and sequence number that is dropping the traffic. We have successfully identified the root of the issue!! 😀 🎉\nLessons learned When I started, I wanted to be super cautious with the credits ($$) so I was using gpt-3.5-turbo-16k that is cheaper but also less intelligent. At some point, I faced issues with the LLM getting into a loop of problems, I decided to test out gpt-4o and felt a difference on the way the agent was reasoning. Initially, I was using an LLM temperature = 0, this was ok, but the responses were lacking variety and details, I needed to make it more chatty. Tweaking the temperature = 0.9 gave me a good balance between chattiness and correctness (although sometimes the agent still gives information that is questionable based on the outputs) Troubleshooting problems could be difficult at times, mostly I relied on printing function outputs while the functions were executed and the agent printed on the terminal. It let me understand what tools the agent was using and the order. Also, I could see what the tools were returning. Here is an example: The text in green indicate the tools the agent is accessing. The yellow text is the information returned by a function. In this case, we can see that the agent called \u0026quot;get_entry_time_and_state\u0026quot; function so it can get information needed to call the next function \u0026quot;get_flow_detail\u0026quot;\nThere are better tools available to help with troubleshooting like LangSmith Tr acing, I will explore it for future use.\nThe system prompt of my agent had to be refined several times, I often found that I needed to provide more details to handle certain situations correctly, especially when the output of a function was needed to call another one or to handle unexpected situations. I think it can still be improved, in fact I want to write a totally different prompt to try and make the agent run all of the tools by itself and just return a conclusion after analyzing all the outputs. Conclusion All in all, it was a good (and long) exercise to learn and build my first assistant. I feel happy with the result as I was able to get to me objective. At the same time, I recognize there are a lot of things that could be improved to make the results more reliable and meaningful. Also, there is much more information that NWPI can show, so the tools can definitely be extended.\nAs a next step, I am planning to learn LangChain properly and understand how can I implement multiple agents to enhance the functionality and reliability of my assistant.\nI hope this post will help you in the same way that Cisco Live presentation helped me!\n","permalink":"http://localhost:1313/building-my-first-sd-wan-ai-assistant-with-langchain/","summary":"Discover how LLMs can be integrated with Cisco SD-WAN to troubleshoot your network in a simple and stress-free way","title":"Building my first SD-WAN AI Assistant with LangChain"},{"content":"Introduction As networks evolve to provide better user experience and new technologies to manage the network are introduced, maintaining everything running smoothly has become increasingly difficult. One of the critical responsibilities of the operations team is tracking problems happening all over the network. Identifying them is just the beginning, then they need to be logged and driven to resolution. Multiply the amount of actions per incident and you have enough to keep your IT team busy all day long!\nIn this post I will show you what you need to know to integrate the SD-WAN Manager with ServiceNow for incident management. We will see some of the most common problems in SD-WAN.\nLab setup I am using SD-WAN Manager version 20.12.1 and I have a ServiceNow developer instance. My Webhook Server runs in Ubuntu 20.04 LTS and I built the webhook receiver in Go language.\nTo simplify things, I have direct communication between all the elements of my lab.\nWebhooks Webhooks are a way for web applications to communicate with each other in real-time. They allow one application to send automated notifications to another application when a specific event occurs, it is referred to as push model. This facilitates integration between different systems and can be used to trigger subsequent automated activities. Webhooks typically use HTTP callbacks to share notifications/information.\nIn our scenario, the SD-WAN Manager will monitor events on BR10 and will send HTTP POST requests to our Webhook Server when specific events occur. This will allow us to manage incidents in ServiceNow.\nAnatomy of a Webhook Notification Let\u0026rsquo;s understand the structure and information that the SD-WAN Manager will be sharing with our Webhook Server.\nThis is an example of the information sent when some interface goes down\n{ \u0026#34;suppressed\u0026#34;: false, \u0026#34;devices\u0026#34;: [ { \u0026#34;system-ip\u0026#34;: \u0026#34;1.1.10.1\u0026#34; } ], \u0026#34;eventname\u0026#34;: \u0026#34;interface-state-change\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;interface-state-change\u0026#34;, \u0026#34;rulename\u0026#34;: \u0026#34;interface-state-change\u0026#34;, \u0026#34;component\u0026#34;: \u0026#34;VPN\u0026#34;, \u0026#34;entry_time\u0026#34;: 1709277345253, \u0026#34;statcycletime\u0026#34;: 1709277345253, \u0026#34;message\u0026#34;: \u0026#34;The interface oper-state changed to down\u0026#34;, \u0026#34;severity\u0026#34;: \u0026#34;Critical\u0026#34;, \u0026#34;severity_number\u0026#34;: 1, \u0026#34;uuid\u0026#34;: \u0026#34;9e2f7630-d504-4cdf-b808-fc8e29a6dd47\u0026#34;, \u0026#34;values\u0026#34;: [ { \u0026#34;host-name\u0026#34;: \u0026#34;BR10\u0026#34;, \u0026#34;system-ip\u0026#34;: \u0026#34;1.1.10.1\u0026#34;, \u0026#34;if-name\u0026#34;: \u0026#34;GigabitEthernet2\u0026#34;, \u0026#34;new-state\u0026#34;: \u0026#34;down\u0026#34;, \u0026#34;vpn-id\u0026#34;: \u0026#34;0\u0026#34; } ], \u0026#34;rule_name_display\u0026#34;: \u0026#34;Interface_State_Change\u0026#34;, \u0026#34;receive_time\u0026#34;: 1708843127894, \u0026#34;values_short_display\u0026#34;: [ { \u0026#34;host-name\u0026#34;: \u0026#34;BR10\u0026#34;, \u0026#34;system-ip\u0026#34;: \u0026#34;1.1.10.1\u0026#34;, \u0026#34;if-name\u0026#34;: \u0026#34;GigabitEthernet2\u0026#34;, \u0026#34;new-state\u0026#34;: \u0026#34;down\u0026#34; } ], \u0026#34;system_ip\u0026#34;: \u0026#34;1.1.10.1\u0026#34;, \u0026#34;host_name\u0026#34;: \u0026#34;BR10\u0026#34;, \u0026#34;acknowledged\u0026#34;: false, \u0026#34;active\u0026#34;: true } Let\u0026rsquo;s extract the most important information for us:\n\u0026quot;active\u0026quot;: true- Do we have a problem? Yes, issue is active or present \u0026quot;message\u0026quot;: \u0026quot;The interface oper...\u0026quot; - What is happening? \u0026quot;severity_number\u0026quot;: 1 - How serious it is? (we chose the number instead of the string on purpose) \u0026quot;uuid\u0026quot;: \u0026quot;9e2f7630-d504...d47\u0026quot; - Event identifier used by SD-WAN Manager \u0026quot;system_ip\u0026quot;: \u0026quot;1.1.10.1\u0026quot; - What device originated the event? \u0026quot;host_name\u0026quot;: \u0026quot;BR10\u0026quot; - More meaningful device identifier for humans Let\u0026rsquo;s see the notification when the interface comes up\n{ \u0026#34;suppressed\u0026#34;: false, \u0026#34;devices\u0026#34;: [ { \u0026#34;system-ip\u0026#34;: \u0026#34;1.1.10.1\u0026#34; } ], \u0026#34;eventname\u0026#34;: \u0026#34;interface-state-change\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;interface-state-change\u0026#34;, \u0026#34;rulename\u0026#34;: \u0026#34;interface-state-change\u0026#34;, \u0026#34;component\u0026#34;: \u0026#34;VPN\u0026#34;, \u0026#34;entry_time\u0026#34;: 1709277482508, \u0026#34;statcycletime\u0026#34;: 1709277482508, \u0026#34;message\u0026#34;: \u0026#34;The interface oper-state changed to up\u0026#34;, \u0026#34;severity\u0026#34;: \u0026#34;Medium\u0026#34;, \u0026#34;severity_number\u0026#34;: 3, \u0026#34;uuid\u0026#34;: \u0026#34;5486325c-d189-4467-9b5a-16acb1f28ec9\u0026#34;, \u0026#34;values\u0026#34;: [ { \u0026#34;host-name\u0026#34;: \u0026#34;BR10\u0026#34;, \u0026#34;system-ip\u0026#34;: \u0026#34;1.1.10.1\u0026#34;, \u0026#34;if-name\u0026#34;: \u0026#34;GigabitEthernet2\u0026#34;, \u0026#34;new-state\u0026#34;: \u0026#34;up\u0026#34;, \u0026#34;vpn-id\u0026#34;: \u0026#34;0\u0026#34; } ], \u0026#34;rule_name_display\u0026#34;: \u0026#34;Interface_State_Change\u0026#34;, \u0026#34;receive_time\u0026#34;: 1708843265147, \u0026#34;values_short_display\u0026#34;: [ { \u0026#34;host-name\u0026#34;: \u0026#34;BR10\u0026#34;, \u0026#34;system-ip\u0026#34;: \u0026#34;1.1.10.1\u0026#34;, \u0026#34;if-name\u0026#34;: \u0026#34;GigabitEthernet2\u0026#34;, \u0026#34;new-state\u0026#34;: \u0026#34;up\u0026#34; } ], \u0026#34;system_ip\u0026#34;: \u0026#34;1.1.10.1\u0026#34;, \u0026#34;host_name\u0026#34;: \u0026#34;BR10\u0026#34;, \u0026#34;acknowledged\u0026#34;: false, \u0026#34;cleared_events\u0026#34;: [ \u0026#34;9e2f7630-d504-4cdf-b808-fc8e29a6dd47\u0026#34; ], \u0026#34;active\u0026#34;: false } The two most important things are:\n\u0026quot;active\u0026quot;: false - Issue is no longer active or present \u0026quot;cleared_events\u0026quot;: [\u0026quot;9e2f7630-d504...d47]\u0026quot; - Event ID that is resolved One thing to know is that not all the events will behave in the same way. Some of them will not have a \u0026ldquo;cleared_events\u0026rdquo; entry so we would need to handle them differently if we want to automatically close them. Others might lack certain information depending on what we are monitoring.\nBefore coding any type of application, it\u0026rsquo;s important to know what you want to monitor and what you will be getting from the SD-WAN Manager so you can properly handle it.\nConfigure Webhooks on SD-WAN Manager On 20.12, it\u0026rsquo;s very simple to configure them, first enable the notification settings from Administration \u0026gt; Settings \u0026gt; Alarm Notifications Let\u0026rsquo;s define the rules to trigger our Webhooks. From Monitor \u0026gt; Logs \u0026gt; Alarm notification \u0026gt; Add Alarm Notification\nThings to know:\nYou can chose to monitor site or devices. Severity is crucial. To open incidents, you typically want to monitor critical and high severity incidents, to close them you need to monitor lower severities. The alarms you want to generate webhooks for, in our case BFD node down/up Omp node down/up Control node down/up Interface down/up Notice that I am only using HTTP in my webhook URL, it is recommended to use HTTPS for higher security. The 8080:/webhook comes from the app we build. Threshold will limit the amount of notifications sent per minute to this URL. 15 is enough for me, but probably not for a production environment Lastly, user and password in case your webhook app requires it. These values would be encoded and sent on the headers. Use dummy values if not required. Build the Webhook Server I have posted the code I used on the following GitHub Repo, here I will explain it in a simpler way.\nStep 1: Listen requests coming on port 8080 and destined to /webhook endpoint.\n// Listen upcoming requests http.HandleFunc(\u0026#34;/webhook\u0026#34;, handleWebhook) fmt.Println(\u0026#34;Server listening on port 8080...\u0026#34;) if err := http.ListenAndServe(\u0026#34;0.0.0.0:8080\u0026#34;, nil); err != nil { fmt.Printf(\u0026#34;Failed to start server: %v\u0026#34;, err) } Step 2. Check if the incoming request has an active status. If yes, create an incident on Service Now.\n//Verify if issue is active and create incident if data[\u0026#34;active\u0026#34;] == true { fmt.Println(\u0026#34;Opening Service Now incident...\u0026#34;) err := createIncident(data) Step 2.1 To open an incident with Service Now, we need to reformat the information that will be sent there.\nfunc createIncident(data map[string]interface{}) error { // Retrieve information to open incident issueId := data[\u0026#34;uuid\u0026#34;].(string) ruleName := data[\u0026#34;rule_name_display\u0026#34;].(string) title := data[\u0026#34;message\u0026#34;].(string) severity := data[\u0026#34;severity_number\u0026#34;].(float64) severityStr := strconv.FormatFloat(severity, \u0026#39;f\u0026#39;, -1, 64) device := \u0026#34;. Device \u0026#34; + data[\u0026#34;host_name\u0026#34;].(string) + \u0026#34;, System-ip \u0026#34; + data[\u0026#34;system_ip\u0026#34;].(string) // Construct JSON payload for creating incident in SNOW incidentData := map[string]interface{}{ \u0026#34;category\u0026#34;: \u0026#34;network\u0026#34;, \u0026#34;caller_id\u0026#34;: \u0026#34;vManage\u0026#34;, \u0026#34;short_description\u0026#34;: issueId, \u0026#34;description\u0026#34;: ruleName + \u0026#34; - \u0026#34; + title + device, \u0026#34;urgency\u0026#34;: severityStr, \u0026#34;impact\u0026#34;: severityStr, } ... Notice that we have stored the uuid coming from vmanage and used it as short_description for Service Now.\nStep 3.a If the status is not active, we check if there are any cleared_events included, this will give us high precision when closing incidents.\nif _, ok := data[\u0026#34;cleared_events\u0026#34;]; ok { ... clearedEvents, ok := data[\u0026#34;cleared_events\u0026#34;].([]interface{}) eventId := clearedEvents[0].(string) incidentExists, incident_id, err := getIncidentWithId(eventId) ... if incidentExists { err := closeIncident(incident_id) To close a case, we need to have the Service Now identifier called sys_id. To get it, we use the getIncidentWithId function.\nfunc getIncidentWithId(issueId string) (bool, string, error) { ... // Store Service Now \u0026#34;short_description\u0026#34; shortDescription, ok := incidentMap[\u0026#34;short_description\u0026#34;].(string) // Compare the short_description with the issueId if strings.Contains(shortDescription, issueId) { // If the short_description matches the issueId, return the incident id sys_id, ok := incidentMap[\u0026#34;sys_id\u0026#34;].(string) if !ok { continue } return true, sys_id, nil Step 3.b If the status is not active and there are no cleared events included, we are going to try and find the incident that was opened. There are three things we check:\nRule Name - The rule names for the events we are monitoring will have the following structure _node_. For example, BFD_Node_Down. If we are looking at BFD_Node_Up, we will change Up for Down and look for BFD_Node_Down on the incidents returned from Service Now. System Ip - Store the System-ip contained on the notification and match it on the description of each incident returned. Time - We store the opened_at time and check if it less than 12 hours. This is a totally subjective measure, but my idea is that that issues that take longer than 12 hours to resolve, would have to be verified by some human. func getIncidentWoutId(ruleName, sysIp string, openTime float64) (bool, string, error) { ... // IncidentMap holds the incidents from Service Now description := incidentMap[\u0026#34;description\u0026#34;].(string) snowTime := incidentMap[\u0026#34;opened_at\u0026#34;].(string) newRuleName := strings.Replace(ruleName, \u0026#34;Up\u0026#34;, \u0026#34;Down\u0026#34;, -1) // Compare Rule Name, system ip and time if strings.Contains(description, newRuleName) \u0026amp;\u0026amp; strings.Contains(description, sysIp) \u0026amp;\u0026amp; diffHours \u0026lt; 12 { sys_id, ok := incidentMap[\u0026#34;sys_id\u0026#34;].(string) sys_id, ok := incidentMap[\u0026#34;sys_id\u0026#34;].(string) if !ok { continue } return true, sys_id, nil Step 4. Close the case with the sys_id obtained through getIncidentWoutId function.\nif incidentExists { err := closeIncident(incident_id) if err != nil { fmt.Printf(\u0026#34;Error closing incident: %v\\n\u0026#34;, err) // Handle the error accordingly (e.g., log it, return, etc.) return } } else { fmt.Printf(\u0026#34;Incident doesn\u0026#39;t exist or is older than 12 hours\u0026#34;) } Demo We\u0026rsquo;ll start by running the Go app. Notice I am not using VS Code to run it(Cntrl + F5), but the terminal so we can allow incoming connections.\nInterface Notification Let\u0026rsquo;s shut down one of the service side interfaces on the router:\nBR10-1#config-transaction BR10-1(config)# interface GigabitEthernet 2 BR10-1(config-if)# shutdown BR10-1(config-if)# commit Commit complete. The server receives the notification and opens the incident. The incident number is the identifier in Service Now (sys_id)\nWe unshut the interface and the incident is closed\nNotice this notification has the cleared_events information, so its very easy to find that incident in Service Now. Also, the severity is medium, that\u0026rsquo;s why it\u0026rsquo;s important to set the right value on the Alarm Notification configuration.\nNotice that State is Resolved and Resolution Notes indicate the incident was automatically closed through Webhooks.\nControl Connections and BFD Notifications Let\u0026rsquo;s bring down CCs and BFD sessions by shutting down the transport interface\nBR10-1(config)# interface GigabitEthernet 1 BR10-1(config-if)# sh BR10-1(config-if)# commit Commit complete. Notifications were received and incidents were created\nWhen we un-shut the interface we receive the notifications and also, we log the interface state status for interface Gig 1 and Tunnel1. This is all reflected in Service Now. These interface notifications were not delivered before because connectivity with SD-WAN Manager was lost.\nLessons Learned It\u0026rsquo;s very important to monitor the right severity level, otherwise we might miss notifications to properly close the incidents. SD-WAN Manager could be a bit chatty when generating alerts, the webhook threshold becomes very important and you should test to come with a number that works for your environment. Service Now will come up with a priority based on the Urgency and Impact used to create the ticket. Service Now could have some policies that will prevent you to close incidents if certain information is not present on the UI. Be a little bit familiar with UI policies and Data Policies. Although you can manually set the \u0026ldquo;sys_id\u0026rdquo; on Service Now through APIs, I suggest to leave it alone as putting manual values could cause problems in the future and this field is supposed to be unique across your instance. Just use the auto-generated value. You can use public sites like this one, to easily see the content of the notifications while planning your use cases. Conclusion Los webhooks son una excelente manera de monitorear nuestro entorno. Ser notificados exactamente cuando ocurre un problema, en lugar de depender de monitoreo continuo, aumenta nuestra capacidad para registrar y reaccionar rápidamente ante lo que está sucediendo. Puedes combinar los webhooks con otros tipos de alertas, como correos electrónicos o incluso chat (Webex, Slack, etc.) en caso de que necesites alertar a diferentes equipos. Espero que este post te haya dado algunas ideas o haya despertado tu curiosidad.\n¡Gracias por leerlo!\n","permalink":"http://localhost:1313/tracking-sd-wan-incidents-with-service-now/","summary":"Learn how to integrate Cisco SD-WAN with ServiceNow and automate your incident management","title":"Tracking SD-WAN incidents with Service Now"},{"content":"Introduction Software Defined Networks (SDNs) came with the promise of simplifying network management, enabling network teams to automate and adopt a programmatic approach. Cisco created solutions like - Catalyst Center, ACI, Meraki and Viptela SD-WAN. The latter introduced new controllers that changed the rules that dictate how the WAN network operates.\nOrganization that were not ready to take the full SD-WAN leap, while still desiring the benefits of SDN principles had limited options, such as integrating with third-party systems or relying on Catalyst Center. While these solutions addressed some challenges, a significant gap remained unfilled until\u0026hellip; SD-Routing!\nWhat is SD-Routing? Simply put, SD-Routing is the middle ground between SDNs and SD-WAN. With SD-Routing, organizations could gradually adopt software-defined networking in their existing infrastructure. The idea behind it is to manage your non-sdwan (a.k.a \u0026ldquo;traditional\u0026rdquo;) network from a Single Pane of Glass called SD-WAN Manager (formerly vManage). It is possible to manage SD-WAN devices at the same time, of course!\nAs opposed to SD-WAN, there is no need to connect to the SD-WAN controller (formerly vSmart), thus the existing routing protocols remain in place and you get an additional security layer with the SD-WAN Validator (formely vBond) to allow the right devices to connect.\nBenefits Some of the benefits of SD-Routing include\nOnboarding - New devices could be easily and quickly onboarded using SD-WAN Manager. Configuration - Manage the configuration of your devices from a single place through a reusable method, called Configuration Groups. that will allow to scale quicker. Streamlined workflows for security policies and cloud connectivity. Monitoring - Monitor your devices, sites and applications. Get alerts and events, take advantage of SD-WAN\u0026rsquo;s Manager notification capabilities. Software management - Distribute, install and activate software images simply and quickly. Troubleshooting - Run different operations from vManage like SSH sessions, speed tests, traceroutes and more. Transition to SD-WAN- If you have plans to deploy SD-WAN, SD-Routing will be a great place to start getting familiar with the SD-WAN Manager and simplify the migration. SD-WAN Manager Overview Let me give you a quick tour of the SD-WAN Manager and a brief view of some of the features. If you are familiar with it, you are probably still going to be surprised by the new look on 20.13. Check it out!\nNetwork Overview When we first log-in, the network overview is presented so we can quickly determine how many devices and controllers are actively connected, application information, and more.\nHey, where did the SD-WAN Controller go?!\nSD-WAN Manager 20.13\nThe Magnetic look and feel will remind you of other Cisco Security Products or Meraki Dashboard, this is great to keep the experience consistent. Notice top right there is a SD-Routing toggle button, this is very useful to show the information concerning SD-Routing and the reason why we don\u0026rsquo;t see the SD-WAN Controller.\nMonitor Devices If we want to see more detailed device information we can visit the Devices tab. SD-WAN Manager is constantly refreshing this information so we have an accurate view. Notice devices are listed as SD-Routing.\nBR20 is not having a good health due to high memory utilization, could we find out when this started? Let\u0026rsquo;s double click on it.\nIt started going beyond 75% at around 12:30, this was because I activated performance monitor to get app performance information.\nLet\u0026rsquo;s focus on the left menu, look to all the available monitoring options including applications, security features and real time information. The troubleshooting section is the place to go to use the tools I listed earlier.\nConfiguration In 20.13/17.13 support for SD-Routing Configuration Groups was added. With them, you can build Feature Profiles based on parcels, which are single elements that together conform the entire router configuration. In 20.13 the following parcels are available.\nWe have the CLI configuration Profile to push whatever is not available through parcels. We can define variables to make our Profile reusable across multiple devices. You can also use an entire CLI Profile instead of using parcels.\nBy the way, if you have a mix of SD-WAN and SD-Routing devices, you will see both Configuration Groups listed there. SD-WAN has (for now) a richer set of parcels, this should be gradually shifted to support more non-CLI based configuration for SD-Routing.\nWorkflows The workflows library will help us easily achieve certain actions like onboard devices, security configuration, software upgrades and more.\nInstead of clicking around on multiple pages, we can navigate step by step as we are presented with everything we need. I personally like how workflows simplify things for us.\nCloud Connectivity Most likely your organization will use some kind of cloud connectivity, either to access apps or run workloads. SD-Routing has got you covered.\nYou can automate the connection to the cloud provider so your network will be extended to access those resources.\nThere are multiple options here. Some of this is also provided for SD-WAN so I recommend checking the config guides to see what is available for SD-Routing.\nConclusion The purpose of this post is to show what is possible with SD-Routing and the gap that it\u0026rsquo;s aiming to close. Adopting this technology could positively impact your operational workflows, enhance network agility, and optimize resource utilization. If your organization has not yet adopted any form of SDN, I invite you to think about your day-to-day processes and identify the main challenges, things that could be done more efficiently and how SD-Routing could help you with them.\nLet me know what you think and I will see you on the next one!\n","permalink":"http://localhost:1313/a-new-chapter-sd-routings-revolution-in-network-management/","summary":"Explore how SD-Routing can simply and effectively help you manage and monitor your WAN network.","title":"A New Chapter: SD-Routing's Revolution in Network Management"},{"content":"Introduction For the final post of this series, let\u0026rsquo;s explore the remaining option to handle traffic when SLA is not met: Fallback to best path. It was introduced on 20.5/17.5 and it provides more flexibility and enhanced path selection compared to the other options. Let\u0026rsquo;s understand why it was created.\nMotivation With the previous methods, traffic would either:\nBe dropped - Rarely used, specific use cases that apply to a small amount of environments. Be load balanced on the available paths - Widely used, however traffic could be using the worst performing path. Take the following example\nTunnel 2 is clearly having the worst performance, however with the load balance method, traffic could still use it based on the hashing algorithm. How do we overcome this situation? You probably guessed it: Fallback to best path\nFallback to Best Path Let\u0026rsquo;s see how the documentation describes it:\nWhen the data traffic does not meet any of the SLA class requirements, this feature allows you to select the best tunnel path criteria sequence using the Fallback Best Tunnel.\nCisco SD-WAN Manager uses best of worst (BOW) to find a best tunnel when no tunnel meets any of the SLA class requirements.\nhttps://www.cisco.com/c/en/us/td/docs/routers/sdwan/configuration/policies/ios-xe-17/policies-book-xe/application-aware-routing.html\nBest of Worst Let\u0026rsquo;s see how BOW works with the following example:\nThe SLA latency requirement is set to 8. None of the tunnels satisfy it, but Tunnel 1 is the closest one, making it the best of worse with a latency of 10.\nThe criteria(s) to choose the BOW is extremely flexible, in this example we used latency, other options could be:\nlatency - Only latency jitter - Only jitter loss - Only loss latency/jitter - First latency, if they are equal, then jitter latency/loss - First latency, if they are equal, then loss jitter/latency - First jitter, if they are equal, then latency . . . loss/jitter/latency - First loss, then jitter, then latency Variance Let\u0026rsquo;s go a step further, Tunnel 3 is also very close to the 8 ms latency, it wouldn\u0026rsquo;t be a bad idea to send traffic also on that tunnel. How do we achieve this? Well, we can implement a variance to accommodate small variations when choosing the best paths.\nContinuing with this example, let\u0026rsquo;s take a look at the BOW selection with a variance of 5 ms.\nBOW range = (best latency, best latency + variance) BOW range = (10, 15) The best latency across tunnels is 10 (Tunnel 1), notice this is not the latency configured on the SLA. With this variance, if any other tunnel has a latency between 10 - 15, it will also be chosen to send traffic. In our example, Tunnel 3 satisfies the condition, so now Tunnel 1 and Tunnel 3 will be used as Fallback Tunnels.\nAs you can see, Tunnel 2 is no longer considered. Great!\nConfiguration SLA Class To use this method, the first thing we need to do is modify our sla-class to indicate that it should look for the best performing path when SLA is not met. Our configuration looks like this:\nsla-class Custom-SLA loss 1 latency 250 jitter 100 fallback-best-tunnel criteria loss loss-variance 2 Notice we selected the Criteria to be Loss and a variance of 2. Variance is an optional parameter.\nAAR Policy Next, on the AAR policy we specify the action when SLA is not met: Fallback to Best path\nsequence 1 match source-ip 172.16.10.0/24 destination-ip 172.16.20.0/24 action sla-class Custom-SLA no sla-class strict sla-class preferred-color mpls sla-class fallback-to-best-path Let\u0026rsquo;s keep the same dynamic and build a diagram:\nScenarios Using the same topology let\u0026rsquo;s explore some situations\nMPLS compliant, Biz-internet/Private1 non-compliant I will initiate traffic from Branch10 -\u0026gt; Branch 20 and capture it with NWPI. MPLS has perfect KPI metrics (0, 0, 0)\nNotice how fallback to best path is set to no and traffic is matching the SLA and preferred color. Let\u0026rsquo;s also see the following verification command from BR10.\nBR10#show sdwan tunnel sla \u0026lt;. . .\u0026gt; tunnel sla-class 1 sla-name Custom-SLA sla-loss 1 sla-latency 250 sla-jitter 100 FALLBACK REMOTE T SLA SLA SRC DST SYSTEM LOCAL T REMOTE MEAN MEAN MEAN CLASS CLASS PROTO SRC IP DST IP PORT PORT IP COLOR COLOR LOSS LATENCY JITTER INDEX SLA CLASS NAME INDEX --------------------------------------------------------------------------------------------------------------------------------------------- gre 21.1.10.2 21.1.20.2 0 0 1.1.0.20 mpls mpls 0 0 0 0,1 __all_tunnels__, Custom-SLA None gre 21.1.10.2 31.1.20.2 0 0 1.1.0.20 mpls biz-internet 0 0 0 0,1 __all_tunnels__, Custom-SLA None gre 21.1.10.2 41.1.20.2 0 0 1.1.0.20 mpls private1 0 0 0 0,1 __all_tunnels__, Custom-SLA None Some comments about this output:\nThe fact that we see tunnels listed under Custom-SLA, tells us that there are tunnels meeting the loss, latency and jitter. This is expected as our MPLS is having perfect metrics. See that this sla-class has a numeric identifier of 1 - tunnel sla-class 1. You will see reference to this number shortly. Fallback SLA class index is set to none, this mean that these tunnels are not being used as fallback tunnels, this will become clear in a second. MPLS/Biz-inernet/Private1 non-compliant but meeting variance Now that we have no transports meeting the SLA, let\u0026rsquo;s check how NWPI will show it:\nNotice that now NWPI is indicating that Fallback to Best Path is in use.\nPrivate1 was chosen to send this particular flow, but are there any other tunnels that could be used? Let\u0026rsquo;s check BR10 again.\nBR10# show sdwan tunnel sla tunnel sla-class 0 sla-name __all_tunnels__ sla-loss 0 sla-latency 0 sla-jitter 0 FALLBACK REMOTE SLA SLA SRC DST SYSTEM T LOCAL T REMOTE MEAN MEAN MEAN CLASS CLASS PROTO SRC IP DST IP PORT PORT IP COLOR COLOR LOSS LATENCY JITTER INDEX SLA CLASS NAME INDEX ---------------------------------------------------------------------------------------------------------------------------------------- gre 21.1.10.2 21.1.20.2 0 0 1.1.0.20 mpls mpls 18 0 0 0 __all_tunnels__ None gre 21.1.10.2 31.1.20.2 0 0 1.1.0.20 mpls biz-internet 9 0 0 0 __all_tunnels__ None gre 21.1.10.2 41.1.20.2 0 0 1.1.0.20 mpls private1 11 0 0 0 __all_tunnels__ None gre 31.1.10.2 21.1.20.2 0 0 1.1.0.20 biz-internet mpls 4 0 0 0 __all_tunnels__ 1 gre 31.1.10.2 31.1.20.2 0 0 1.1.0.20 biz-internet biz-internet 2 0 0 0 __all_tunnels__ 1 gre 31.1.10.2 41.1.20.2 0 0 1.1.0.20 biz-internet private1 4 0 0 0 __all_tunnels__ 1 gre 41.1.10.2 21.1.20.2 0 0 1.1.0.20 private1 mpls 3 0 0 0 __all_tunnels__ 1 gre 41.1.10.2 31.1.20.2 0 0 1.1.0.20 private1 biz-internet 6 0 0 0 __all_tunnels__ None gre 41.1.10.2 41.1.20.2 0 0 1.1.0.20 private1 private1 3 0 0 0 __all_tunnels__ 1 tunnel sla-class 1 sla-name Custom-SLA sla-loss 1 sla-latency 250 sla-jitter 100 BR10# Comments about this output:\nThere are no tunnels meeting our Custom-SLA Even if MPLS is the preferred color, it is not considered because it doesn\u0026rsquo;t meet the loss variance range. There are 5 tunnels that satisfy the variance. Notice how some tunnels have Fallback SLA class index set to 1, meaning that they are serving as fallback for sla-class 1 (Custom-SLA). In this case the BOW is biz-internet - biz-internet tunnel with a mean loss of 2. The variance is set to 2, so BOW range is 2-4. Tunnels satisfying the BOW range, will be used to forward traffic as well. Depending on the load-balance hash, different tunnels will be chosen\nBR10#show sdwan policy service-path vpn 10 interface GigabitEthernet 3 source-ip 172.16.10.2 dest-ip 172.16.20.2 protocol 6 dest-port 22 Next Hop: GRE Source: 31.1.10.2 Destination: 21.1.20.2 Local Color: biz-internet Remote Color: mpls Remote System IP: 1.1.0.20 BR10#show sdwan policy service-path vpn 10 interface GigabitEthernet 3 source-ip 172.16.10.56 dest-ip 172.16.20.2 protocol 6 dest-port 24 Next Hop: GRE Source: 31.1.10.2 Destination: 41.1.20.2 Local Color: biz-internet Remote Color: private1 Remote System IP: 1.1.0.20 We can see two different tunnels biz-internet - mpls and biz-internet - private\nLatency out of compliance So far we have been playing only with loss, because the fallback criteria was set to loss. Let\u0026rsquo;s see what happens when a different criteria goes out of compliance. I will set the latency of the SLA to 15 ms. .\nBR10#show sdwan policy from-vsmart from-vsmart sla-class Custom-SLA loss 1 latency 15 jitter 100 fallback-best-tunnel criteria loss loss-variance 2 After introducing some latency, we see something interesting:\nBR10#show sdwan tunnel sla tunnel sla-class 0 sla-name __all_tunnels__ sla-loss 0 sla-latency 0 sla-jitter 0 FALLBACK REMOTE SLA SLA SRC DST SYSTEM T LOCAL T REMOTE MEAN MEAN MEAN CLASS CLASS PROTO SRC IP DST IP PORT PORT IP COLOR COLOR LOSS LATENCY JITTER INDEX SLA CLASS NAME INDEX ---------------------------------------------------------------------------------------------------------------------------------------- gre 21.1.10.2 21.1.20.2 0 0 1.1.0.20 mpls mpls 0 20 1 0 __all_tunnels__ 1 gre 21.1.10.2 31.1.20.2 0 0 1.1.0.20 mpls biz-internet 0 20 1 0 __all_tunnels__ 1 gre 21.1.10.2 41.1.20.2 0 0 1.1.0.20 mpls private1 0 20 0 0 __all_tunnels__ 1 gre 31.1.10.2 21.1.20.2 0 0 1.1.0.20 biz-internet mpls 0 21 2 0 __all_tunnels__ 1 gre 31.1.10.2 31.1.20.2 0 0 1.1.0.20 biz-internet biz-internet 0 21 2 0 __all_tunnels__ 1 gre 31.1.10.2 41.1.20.2 0 0 1.1.0.20 biz-internet private1 0 21 2 0 __all_tunnels__ 1 gre 41.1.10.2 21.1.20.2 0 0 1.1.0.20 private1 mpls 0 16 1 0 __all_tunnels__ 1 gre 41.1.10.2 31.1.20.2 0 0 1.1.0.20 private1 biz-internet 0 16 0 0 __all_tunnels__ 1 gre 41.1.10.2 41.1.20.2 0 0 1.1.0.20 private1 private1 0 16 0 0 __all_tunnels__ 1 tunnel sla-class 1 sla-name Custom-SLA sla-loss 1 sla-latency 15 sla-jitter 100 BR10# All of the tunnels are used as fallback tunnels because all of them have 0% loss! Is this the ideal situation? This is arguable, maybe for some types of traffic it\u0026rsquo;s fine, but for others you probably want to have a second or third criteria to pick the best fallback tunnels.\nMultiple BOW criteria For the last test, let\u0026rsquo;s see what happens when we select multiple criteria to select the BOW. I will add latency to the SLA criteria.\nBR10#show sdwan policy from-vsmart from-vsmart sla-class Custom-SLA loss 1 latency 15 jitter 100 fallback-best-tunnel criteria loss latency loss-variance 2 What we expect is that if any of the KPIs go out of compliance, the BOW will be decided based on:\nLowest mean loss. If there is a tie, then Lowest latency Let\u0026rsquo;s verify\nBR10#show sdwan tunnel sla tunnel sla-class 0 sla-name __all_tunnels__ sla-loss 0 sla-latency 0 sla-jitter 0 FALLBACK REMOTE SLA SLA SRC DST SYSTEM T LOCAL T REMOTE MEAN MEAN MEAN CLASS CLASS PROTO SRC IP DST IP PORT PORT IP COLOR COLOR LOSS LATENCY JITTER INDEX SLA CLASS NAME INDEX ---------------------------------------------------------------------------------------------------------------------------------------- gre 21.1.10.2 21.1.20.2 0 0 1.1.0.20 mpls mpls 0 20 1 0 __all_tunnels__ None gre 21.1.10.2 31.1.20.2 0 0 1.1.0.20 mpls biz-internet 0 20 1 0 __all_tunnels__ None gre 21.1.10.2 41.1.20.2 0 0 1.1.0.20 mpls private1 0 20 1 0 __all_tunnels__ None gre 31.1.10.2 21.1.20.2 0 0 1.1.0.20 biz-internet mpls 0 20 1 0 __all_tunnels__ None gre 31.1.10.2 31.1.20.2 0 0 1.1.0.20 biz-internet biz-internet 0 20 1 0 __all_tunnels__ None gre 31.1.10.2 41.1.20.2 0 0 1.1.0.20 biz-internet private1 0 21 1 0 __all_tunnels__ None gre 41.1.10.2 21.1.20.2 0 0 1.1.0.20 private1 mpls 0 16 0 0 __all_tunnels__ 1 gre 41.1.10.2 31.1.20.2 0 0 1.1.0.20 private1 biz-internet 0 16 0 0 __all_tunnels__ 1 gre 41.1.10.2 41.1.20.2 0 0 1.1.0.20 private1 private1 0 16 0 0 __all_tunnels__ 1 tunnel sla-class 1 sla-name Custom-SLA sla-loss 1 sla-latency 15 sla-jitter 100 BR10# It\u0026rsquo;s clear that the loss wasn\u0026rsquo;t used to come up with the BOW, otherwise we would see all the tunnels acting as fallback for SLA Class index 1. Instead, tunnels with lowest latency were selected. Notice that I could have added a latency variance to include other tunnels with similar numbers.\nConclusion Through the last three posts, we have witnessed AAR being a critical SD-WAN functionality to protect the SLA of our applications. I hope that after explaining and verifying different scenarios, you now have a better understanding and feel more confident to try AAR within your SD-WAN infrastructure.. The configuration guide is very complete, so get familiar with it and use it when you need it.\nLet me know your thoughts in the comments.\nSee you soon!\n","permalink":"http://localhost:1313/simplifying-aar-3-3-fallback-to-best-path/","summary":"Learn how AAR can help improve the application user experience with Cisco SD-WAN","title":"Simplifying AAR: 3/3 Fallback to best path"},{"content":"Introduction Welcome back to the second installment of my series on Application Aware Routing (AAR). In my previous post, we discussed the essential concepts of Bidirectional Forwarding Detection (BFD) and Service Level Agreements (SLAs), laying the foundation for understanding how AAR optimizes network performance based on application requirements. We also briefly touched on tha AAR configuration with a simple example.\nNow, we continue by digging deeper on different AAR configurations, more specifically we will concentrate on Strict/Drop and Backup SLA Preferred Color behaviors.\nInitial Topology and Configuration Let\u0026rsquo;s start with a simple topology\nI am not limiting the tunnels between colors so we have a total of 4 tunnels on each wan edge.\nmpls - mpls mpls - biz-inet biz-inet- mpls biz-inet - biz-inet This is the BFD hello interval and app-route configuration for all the devices - this is the most relevant to AAR. If you are not familiar with it, I recommend you check my last post before continuing.\nhello-interval 1000 bfd app-route multiplier 3 bfd app-route poll-interval 120000 Scenario 1: SLA not Met - Strict/Drop Our AAR policy is testing against Business-Critical SLA. I will be playing with packet loss to demonstrate how traffic shifts.\nBR10#show sdwan policy from-vsmart from-vsmart sla-class Business-Critical loss 1 latency 250 jitter 100 from-vsmart app-route-policy _VPN10_AAR vpn-list VPN10 sequence 1 match source-ip 172.16.10.0/24 destination-ip 172.16.20.0/24 action sla-class Business-Critical sla-class strict sla-class preferred-color mpls sequence 11 match source-ip 172.16.20.0/24 destination-ip 172.16.10.0/24 action sla-class Business-Critical sla-class strict sla-class preferred-color mpls from-vsmart lists vpn-list VPN10 vpn 10 Let\u0026rsquo;s read what the documentation says about our config:\nsla-class preferred-color mpls\nsla-class sla-class-name preferred-color color — To set a specific tunnel to use when data traffic matches an SLA class, include the preferred-color option, specifying the color of the preferred tunnel. If more than one tunnel matches the SLA, traffic is sent to the preferred tunnel. If a tunnel of the preferred color is not available, traffic is sent through any tunnel that matches the SLA class. If no tunnel matches the SLA, data traffic is sent through any available tunnel\nhttps://www.cisco.com/c/en/us/td/docs/routers/sdwan/configuration/policies/ios-xe-17/policies-book-xe/application-aware-routing.html\nHere\u0026rsquo;s a diagram to better visualize it:\nNote than even if both biz-internet and MPLS match the SLA, only MPLS will be used.\nYes, Biz-internet will be used even if it\u0026rsquo;s not specified as a preferred color if the preferred color is not compliant - from my experience, this is a frequent source of confusion as the expectation is that if mpls is not matching SLA, the SLA not met action will be executed without considering the rest of the colors.\nsla-class strict\nClick Strict/Drop to perform strict matching of the SLA class. If no data plane tunnel is available that satisfies the SLA criteria, traffic is dropped.\nhttps://www.cisco.com/c/en/us/td/docs/routers/sdwan/configuration/policies/ios-xe-17/policies-book-xe/application-aware-routing.html\nNow the diagram looks like this:\nTest 1 - MPLS/Biz-internet compliant I will initiate traffic from Branch10 -\u0026gt; Branch 20 and capture it with NWPI. Both MPLS and Biz-Internet are having perfect KPI metrics (0 loss, 0 latency, 0 jitter)\nBR10-PC1#ssh -l admin 172.16.20.2 Password: We can see the Actual Color is mpls and Tunnel Match Reason is Matched sla and pref encap color. Everything working according to our policy definition.\nTest 2 - Biz-Internet compliant, MPLS non-compliant Let\u0026rsquo;s introduce 3% of packet loss on the mpls link and check the results.\nNow, our mpls tunnel is above the 1% loss threshold, so it\u0026rsquo;s no longer eligible. We confirm the Biz-Internet tunnel is used because it matches the SLA - Tunnel match reason is matched sla and color any\nTest 3 - MPLS/Biz-Internet non-compliant Our last test for this scenario will be to mess the SLAs for both transports. Again, will introduce 3% packet loss on both mpls and biz-internet.\nAs expected, now the traffic is getting dropped on BR10 as there are no transports matching the SLA class. Note the DROP_REPORT indicates SdwanDataPolicyDrop\nScenario 2: Backup SLA Preferred Color Let\u0026rsquo;s explore a new scenario, we will add one transport for this one.\nOur policy configuration will have slight changes. One thing to remark is that when using Backup SLA preferred color option, the only available action when SLA is not met will be Load Balance.\nBR10#show sdwan policy from-vsmart from-vsmart sla-class Business-Critical loss 1 latency 250 jitter 100 from-vsmart app-route-policy _VPN10_AAR vpn-list VPN10 sequence 1 match source-ip 172.16.10.0/24 destination-ip 172.16.20.0/24 action backup-sla-preferred-color private1 sla-class Business-Critical no sla-class strict sla-class preferred-color mpls sequence 11 match source-ip 172.16.20.0/24 destination-ip 172.16.10.0/24 action backup-sla-preferred-color private1 sla-class Business-Critical no sla-class strict sla-class preferred-color mpls from-vsmart lists vpn-list VPN10 vpn 10 Again, let\u0026rsquo;s see what the documentation says:\nbackup-sla-preferred-color private1\nWhen no tunnel matches the SLA, you can choose how to handle the data traffic:\nbackup-sla-preferred-color colors— Direct the data traffic to a specific tunnel. Data traffic is sent out the configured tunnel if that tunnel interface is available; if that tunnel is unavailable, traffic is sent out another available tunnel. You can specify one or more colors.\nhttps://www.cisco.com/c/en/us/td/docs/routers/sdwan/configuration/policies/ios-xe-17/policies-book-xe/application-aware-routing.html\nTo put it visually\nTest 1 - MPLS/Private1 compliant, Biz-Internet non-compliant We will start with the assumption that biz-internet is not compliant with the SLA, so we have two transports available: MPLS and Private1. Let\u0026rsquo;s initiate our traffic.\nBR10-PC1#ssh -l admin 172.16.20.2 Password: Notice SLA strict is set to No and mpls is compliant and in use.\nTest 2 - Private1 compliant, MPLS/Biz-Internet non-compliant For the second test we are introducing loss on the mpls transport. With this, now the only compliant transport is Private1, which also happens to be the Backup SLA preferred color. Let\u0026rsquo;s see how it looks.\nFrom the Tunnel Match Reason we can clearly see that the SLA is met through a color that is not the preferred one (private1). What do you think will happen if private1 becomes non-compliant?\nTest 3 - MPLS/Private1/Biz-Internet non-compliant Private1 is the only transport complying with the SLA, I will take care of that by introducing packet loss.\nAgain (!) private1 is used, BUT now traffic is matching the Default SLA, in other words, there are no tunnels matching the SLA so the tunnel marked as backup preferred, will be used.\nBonus Private1 unavailable\nThe result after shutting down private1 interface, still without any tunnel matching the SLA. We can see a loose match is done on the tunnels (any available tunnel could be picked)\nBiz-internet compliant, MPLS/Private1 non-compliant\nThe result after biz-internet is brought back to zero loss values with private1 not matching the SLA. Even if it\u0026rsquo;s not the preferred color, it still matches the SLA so it is selected.\nAs a final note, keep in mind AAR will always try to use tunnels that match the specified SLA, don\u0026rsquo;t get confused because the color names are not explicitly mentioned on the configuration.\nIn the next post, we will explore the remaining option Fallback to best path. Meet you there!\n","permalink":"http://localhost:1313/demystifying-aar-understanding-different-scenarios/","summary":"Learn how AAR can help improve the application user experience with Cisco SD-WAN","title":"Simplifying AAR: 2/3 Understanding different scenarios"},{"content":"Introduction Think about routing technologies out there, most of them got really good at reacting to link failures and power outages with protocols like OSPF LFA/FRR, EIGRP feasible successor, BGP PIC, etc. However, they fall short when it comes to addressing issues like network performance degradation during brownouts caused by factors such as power fluctuations or link congestion. These scenarios introduce new challenges for which traditional routing protocols lack adequate tools. This is where Application Aware Routing comes to save the day.\nDespite causing some confusion among customers and SD-WAN learners, AAR represents a fundamental advantage of the technology. In this series, we will go through the basics, to understand key principles and behaviors that will enable us to study different scenarios. We will leverage NWPI to better understand how things are working, if you are not familiar with NWPI, I recommend you read this post I wrote about it.\nAAR in 5 lines Using IPSec tunnels formed between WAN Edges, BFD packets will be sent across them to measure the loss, latency and jitter (KPIs).\nUsers can define SLAs for different types of traffic (voice, web, video, etc.) and configure AAR policies to ensure traffic is sent through paths that satisfy the SLA.\nIf, at any point in time, the path is no longer satisfying the SLA, it will be automatically routed to a path that does.\nSimple, right?\nSLAs Service Level Agreement refers to the amount of loss, latency and jitter that an application can handle and still perform. The definition needs to be correct and realistic for the type of traffic and environment.\nExample, if we are defining the SLA for voice, we should know what are the acceptable loss, latency and jitter values. If our voice SLA looks something like this:\nLoss - 5% Latency - 350 ms Jitter - 200 ms It\u0026rsquo;s very likely that calls will not have good quality.\nHaving these values would be much better:\nLoss - 1% Latency - 150 ms Jitter - 50 ms Also, consider the nature of the environment when doing these definitions, there are places where providers could be less reliable, traffic could travel long distances, types of transport (satellite vs fiber), etc. You can use SD-WAM Manager\u0026rsquo;s historical KPIs data to build a baseline.\nSLA definition will look like this:\nsla-class Custom-SLA loss 1 latency 250 jitter 100 BFD Bidirectional Forwarding Detection protocol is used to quickly detect faults between two network devices. In SD-WAN, it is also used to measure loss, latency and jitter. The parameters we use to configure BFD will dictate how fast SD-WAN will detect and react to network problems.\nHello interval This interval represent how often a BFD echo packet will be sent. It is configured on a per color basis in milliseconds; the default is 1000 ms. This packet will go to the peer wan edge and back, this is how KPIs will be measured for each packet.\nsdwan interface GigabitEthernetX tunnel-interface color mpls hello-interval 1000 \u0026lt;\u0026lt;\u0026lt; Each router model has a defined tunnel scale (number of tunnels it can form). Changing the hello interval below 1s lowers the tunnel scale. Keep this in mind to avoid potential problems related to exceeding hardware capacity.\nApp route poll interval As the wan edge continues to send packets, the poll interval is the timer that will help organize the packets in buckets. These buckets will be used to calculate tunnel statistics. It\u0026rsquo;s configured on a per box basis (same for all colors).\nLet\u0026rsquo;s say we have a poll interval of 4000 ms. Every 4 seconds a new bucket is built, this bucket will have its own index. Default poll interval is 600,000 ms (10 minutes).\nTo configure the poll interval\nbfd app-route poll-interval 60000 The average loss, latency and jitter will be calculated for each poll interval. We can check this directly on SD-WAN Manager -\u0026gt; Monitor -\u0026gt; Real Time -\u0026gt; App Route Statistics\nApp route multiplier To configure the multiplier\nbfd app-route multiplier 3 The multiplier will indicate the amount of buckets that will be used to calculate the tunnel statistics that will make the traffic steer when network conditions worsen. For the illustration, a multiplier of 3 is used. By default the multiplier is set to 6.\nNotice each bucket contains 4 packets\nhello interval (s) x Poll interval (s)\nIn the real world, 4 packets would be too low. If we take all default values, we would end up with a bucket of 600 packets. Check the AAR Deployment Guide for more details and options.\nAfter filling up all the buckets, tunnel statistics will be calculated.\nWe can visualize the buckets and the mean calculations. Notice the values are the same for all the buckets. Don\u0026rsquo;t get confused with the avg loss, latency and jitter columns shown before.\nThis mechanism acts like a sliding window that will discard the oldest bucket to make room for the new one, recalculating tunnel statistics every poll interval.\nConfiguring AAR policy Now that we have a better understanding about SLAs and BFD, we can create the rules that will govern the behavior of our AAR policy. This is how it will look on SD-WAN Manager.\nThis is probably the simplest form we can configure. Google Apps traffic will be matched and transports matching our Custom-SLA will be used indiscriminately. In other words, if we have 3 different transports and all of them meet the SLA, traffic will be load balanced across them.\nWhat if we want traffic to prefer one of the transports? Well, we can specify a Preferred Color as below:\nIn this sequence, voice apps are matched, and transports\u0026rsquo; SLA should match Bussiness-Critical. MPLS will be preferred if it meets the SLA. The action when SLA is not met is set to Load Balance between available colors.\nAt a first glance, this looks very simple, but there are some details we need to know if we want to fully understand how traffic will behave under different circumstances.\nI invite you to read my next post where we will go through some scenarios to get a clear picture. See you there!\n","permalink":"http://localhost:1313/demystifying-aar-1-3-the-foundations/","summary":"Learn how AAR can help improve the application user experience with Cisco SD-WAN","title":"Simplifying AAR:  1/3 The Foundations"},{"content":"Motivation: The typical crisis scenario Imagine starting your day in the networking team, only to be bombarded with complaints about the main internal application being down. You start investigating. Where is the problem located? Is it isolated or affecting multiple places? When did the problem start? What is the impact?\nNext, you get someone to help you verify the basics. DHCP and DNS work. Gateway is reachable. Connectivity to other targets on the same DC is intermittent! It is starting to get weird\u0026hellip;\nAt this point, every minute counts and a proper troubleshooting process needs to be implemented to check all the devices involved and isolate the root of the problem. You start taking packet captures and traces on different points of the network, you check counters, bfd and ipsec sessions, look for inconsistencies on the omp/routing table, verify lengthy policy configurations and port parameters, one hop at a time. Two hours later (hopefully!) you and your team finally get to the root cause\u0026hellip;\nWhat Cisco did about it? Having in mind the level of complexity and the efforts needed to resolve network issues, Cisco created Network Wide Path Insights to make our WAN troubleshooting substantially easier. NWPI was first introduced in 20.4 and with every release it kept getting better. Fast forward to 20.9 and you have much better usability and insights that will help you quickly determine what is going on. Want to see it in action? Tag along!\nTopology We will use this scenario to run our NWPI trace. There is no centralized policy in place, as a result we have a full mesh and traffic could flow on any of the available tunnels.\nUnderstanding NWPI On vManage, navigate to the Tools section to find this feature. To start using it, the minimum information you need is:\nWhere traffic is generated (site ID) Segment of the network (vpn) Device is auto-populated. You can further refine your filters to capture exactly what you are looking for.\n20.12.2 NWPI\nOnce your filters are in place, start the trace and see the magic.\nInsight - basic view Let\u0026rsquo;s see the results of a small scp transfer from branch 10 to 20. This is the first piece of information we will see. Click the image to expand.\nFrom the above, we can determine:\nFlow direction - Traffic flowing from branch 10 to 20 WAN edges touching the traffic - BR10-1 and BR20-2 Flow information - Src/Dst IPs, ports, protocol, App, etc. Colors involved - MPLS -\u0026gt; Biz- Internet SD-WAN KPIs specific to the flow- Loss, latency and jitter Drop percentage - On the WAN and on devices Let\u0026rsquo;s click on the readout to learn more\nReadout New information is available to us:\nMatching entry on routing table - 172.10.20.0/24 coming from OMP and its respective metrics. Candidate and chosen path - Available paths shown and chosen one highlighted in green. Physical interfaces involved - Both for service and transport side Reason to choose this path - Routing, however keep in mind policies can override the routing table. If we stop here, we already have a lot of very useful information to understand the flow of the traffic, but what if we need to dig deeper? Well, let\u0026rsquo;s now explore the Advanced Views\nAdvanced Views If you know the Datapath Packet Trace, this information will look familiar. Essentially, it will tell us all the features that are executed by the device as the packet is being processed. Some examples could be ACLs, Policies, FW rules, DPI, Netflow and much more. There are instances where we need to determine if/why the device is dropping packets, this is the place to check!\nIn summary here is the additional information we can get:\nFeatures - Some of them will be configuration dependent, some will always be there on an SD-WAN environment. Drops - If a feature is dropping traffic, you have the information to know exactly why. Low level details around the features - Most of the time you won\u0026rsquo;t have to deal with this, but may be useful when you contact technical support. There is much more to this feature, but I think this is enough as an introduction. Before going to the conclusion, though, I would like to mention some of the use cases where this feature will come in handy.\nPoor application performance Policy validation Problem isolation DIA and SaaS validation/troubleshooting (yes, it can also give information of traffic destined to the internet) What other scenarios could you think about?\nConclusion NWPI is a great example of Cisco\u0026rsquo;s effort around serviceability - creating a tool that can help troubleshoot and resolve issues faster in a simple and efficient way. Check this guide to know more about it and be aware of the features introduced on the newest releases and more. In my experience, NWPI is not used enough mainly because it\u0026rsquo;s still unknown for a lot of customers and partners. I would encourage you to try it out and eventually incorporate it to your troubleshooting tool set, I am sure you will find some benefit to it.\n","permalink":"http://localhost:1313/network-wide-path-insights-an-introduction/","summary":"Learn how to use the most advanced troubleshooting tool for your Cisco SD-WAN Network.","title":"Cisco SD-WAN Network Wide Path Insights (NWPI)"},{"content":" Hello! I'm Alex, and I love sharing my knowledge about networking and technology. I have been on the networking field for the past years. Currently contributing my expertise at Cisco, where I started at the front lines of R\u0026S TAC Team, after a couple of years, I transitioned to SD-WAN TAC Team. Currently, I'm a Customer Success Specialist for Enterprise technologies, particularly DNA Center and SD-WAN. I earned my CCIE Enterprise on 2022. I am also interested in automation, AI and technology in general. Thanks for being here. Hope you find my blog useful and entertaining. Let's connect! 👇 ","permalink":"http://localhost:1313/about/","summary":"\u003cdiv style=\"display: flex; align-items: center;\"\u003e\n    \u003cdiv style=\"flex: 1; padding-right: 20px;font-size: 17px;\"\u003e\n        \u003cdiv style=\"line-height: 1; margin-bottom: 1em; \"\u003e\u003c/div\u003e\n      \n\nHello! I'm Alex, and I love sharing my knowledge about networking and technology. I have been on the networking field for the past years.\n\u003cbr\u003e\u003cbr\u003e\nCurrently contributing my expertise at Cisco, where I started at the front lines of R\u0026S TAC Team, after a couple of years, I transitioned to SD-WAN TAC Team.\n\u003cbr\u003e\u003cbr\u003e\nCurrently, I'm a Customer Success Specialist for Enterprise technologies, particularly DNA Center and SD-WAN. I earned my CCIE Enterprise on 2022. I am also interested in automation, AI and technology in general. \n\u003cbr\u003e\u003cbr\u003e\nThanks for being here. Hope you find my blog useful and entertaining. Let's connect! 👇\n\u003cbr\u003e\u003cbr\u003e\n\u003cdiv style=\"display: flex; gap: 30px; align-items: center;\"\u003e\n\n  \u003ca href=\"https://www.linkedin.com/in/alexruizs/\" target=\"_blank\" style=\"margin-right: 1px;\"\u003e\n\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" style=\"width:30px; height:30px; fill: var(--primary);\"\u003e\u003cpath d=\"M22.23 0H1.77C.8 0 0 .77 0 1.72v20.56C0 23.23.8 24 1.77 24h20.46c.98 0 1.77-.77 1.77-1.72V1.72C24 .77 23.2 0 22.23 0zM7.27 20.1H3.65V9.24h3.62V20.1zM5.47 7.76h-.03c-1.22 0-2-.83-2-1.87 0-1.06.8-1.87 2.05-1.87 1.24 0 2 .8 2.02 1.87 0 1.04-.78 1.87-2.05 1.87zM20.34 20.1h-3.63v-5.8c0-1.45-.52-2.45-1.83-2.45-1 0-1.6.67-1.87 1.32-.1.23-.11.55-.11.88v6.05H9.28s.05-9.82 0-10.84h3.63v1.54a3.6 3.6 0 0 1 3.26-1.8c2.39 0 4.18 1.56 4.18 4.89v6.21z\"/\u003e\u003c/svg\u003e\n  \u003c/a\u003e\n\n  \u003c!-- GitHub Icon --\u003e\n  \u003ca href=\"https://github.com/aruiz-p\" target=\"_blank\" style=\"margin-right: 1px;\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" style=\"width: 30px; height: 30px; fill: var(--primary);\"\u003e\u003cpath d=\"M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577v-2.234c-3.338.724-4.033-1.415-4.033-1.415-.546-1.385-1.333-1.754-1.333-1.754-1.089-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.775.418-1.305.762-1.605-2.665-.3-5.466-1.333-5.466-5.93 0-1.31.465-2.381 1.235-3.221-.123-.303-.535-1.523.117-3.176 0 0 1.008-.322 3.3 1.23.957-.266 1.983-.398 3.003-.404 1.02.006 2.047.138 3.006.404 2.29-1.552 3.296-1.23 3.296-1.23.653 1.653.241 2.873.118 3.176.77.84 1.231 1.911 1.231 3.221 0 4.61-2.805 5.625-5.475 5.92.429.372.824 1.104.824 2.222v3.293c0 .322.218.694.825.576C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12\"/\u003e\u003c/svg\u003e  \n  \u003c/a\u003e\n\n  \u003c!-- Gmail Icon --\u003e\n\u003ca href=\"mailto:netwithalex@gmail.com\" target=\"_blank\" style=\"margin-right: 1px;\"\u003e\n  \u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" style=\"width: 30px; height: 30px;\"\u003e\n    \u003c!-- Background --\u003e\n    \u003crect width=\"24\" height=\"24\" fill=\"var(--theme)\" /\u003e\n    \u003c!-- Envelope Outline --\u003e\n    \u003cpath d=\"M12 12.713L.015 5.328V19.2A2.8 2.8 0 002.8 22h18.4a2.8 2.8 0 002.8-2.8V5.328L12 12.713zm11.985-7.385v-.2a2.8 2.8 0 00-2.8-2.8H2.8A2.8 2.8 0 000 5.328l12 7.679 12-7.679z\" fill=\"none\" stroke=\"var(--primary)\" stroke-width=\"2.5\" /\u003e\n  \u003c/svg\u003e\n\u003c/a\u003e\n\u003c/div\u003e\n\n\n    \u003c/div\u003e\n    \u003cdiv style=\"flex: 1;\"\u003e\n      \u003cimg src=\"/wp-content/uploads/2024/01/IMG_8522-e1704915321848.jpeg\" alt=\"Example Image\" style=\"max-width: 100%; height: auto;border: 5px solid transparent;border-radius: 20px;\"\u003e\n    \u003c/div\u003e\n  \u003c/div\u003e","title":"About me."}]